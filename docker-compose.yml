services:
  # =====================
  # AUTH SERVICE
  # =====================
  auth_postgres:
    image: postgres:15
    container_name: auth_postgres
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8000:8000"
    env_file:
      - ./auth_service/.env
    volumes:
      - ./auth_service:/app
    depends_on:
      auth_postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             gunicorn auth_service.wsgi:application --bind 0.0.0.0:8000"

  # =====================
  # TALENT ENGINE SERVICE
  # =====================
  talent_postgres:
    image: postgres:15
    container_name: talent_postgres
    environment:
      POSTGRES_DB: talent_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - talent_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d talent_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  talent-engine:
    build:
      context: ./talent_engine
      dockerfile: Dockerfile
    container_name: talent_engine
    ports:
      - "8001:8001"
    env_file:
      - ./talent_engine/.env
    volumes:
      - ./talent_engine:/app
      - ./talent_engine/logs:/app/logs
      - ./talent_engine/media:/app/media
      - ./talent_engine/staticfiles:/app/staticfiles
    depends_on:
      talent_postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py check &&
             python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8001 talent_engine.wsgi:application"

  kafka-consumer:
    build:
      context: ./talent_engine
      dockerfile: Dockerfile
    container_name: kafka-consumer
    env_file:
      - ./talent_engine/.env
    volumes:
      - ./talent_engine:/app
    depends_on:
      talent_postgres:
        condition: service_healthy
    command: python consumer.py

  # =====================
  # JOB APPLICATION SERVICE
  # =====================
  job_app_postgres:
    image: postgres:15
    container_name: job_app_postgres
    environment:
      POSTGRES_DB: job_app_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - job_app_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  job-applications:
    build:
      context: ./job_applications
      dockerfile: Dockerfile
    container_name: job-applications
    ports:
      - "8002:8002"
    env_file:
      - ./job_applications/.env
    volumes:
      - ./job_applications:/app
      - ./job_applications/logs:/app/logs
      - ./job_applications/media:/app/media
      - ./job_applications/staticfiles:/app/staticfiles
    depends_on:
      job_app_postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             gunicorn job_applications.wsgi:application --bind 0.0.0.0:8002"

  # =====================
  # API GATEWAY
  # =====================
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "9090:9090"
    env_file:
      - ./api_gateway/.env
    volumes:
      - ./api_gateway:/app

  # =====================
  # NOTIFICATIONS SERVICE
  # =====================
  notifications-service:
    build:
      context: ./notifications_app
      dockerfile: Dockerfile
    container_name: notifications_service
    ports:
      - "8010:8010"
    env_file:
      - ./notifications_app/.env
    volumes:
      - ./notifications_app:/app
    command: >
      sh -c "python manage.py migrate &&
             gunicorn notifications_app.wsgi:application --bind 0.0.0.0:8010"

  # =====================
  # REDIS
  # =====================
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"

  # =====================
  # KAFKA & ZOOKEEPER
  # =====================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"

# =====================
# VOLUMES
# =====================
volumes:
  auth_postgres_data:
  talent_postgres_data:
  job_app_pgdata:

# =====================
# NETWORKS
# =====================
networks:
  default:
    driver: bridge
