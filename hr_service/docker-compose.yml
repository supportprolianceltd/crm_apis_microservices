version: '3.9'

services:
  hr-service:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: hr
    ports:
      - "8004:8004"
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=True
      - DB_ENGINE=django.db.backends.postgresql
      - HR_DB_NAME=hr_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=hr_postgres
      - DB_PORT=5432
      - DJANGO_SETTINGS_MODULE=hr_service.settings
      - PYTHONPATH=/app
      - ALLOWED_HOSTS=localhost,127.0.0.1,*
      - AUTH_SERVICE_URL=http://auth-service:8001
      - TALENT_ENGINE_URL=http://talent-engine:8002
      - NOTIFICATIONS_SERVICE_URL=http://app:3001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_BUCKET=luminacaremedia
      - STORAGE_TYPE=supabase
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CELERY_BROKER_URL=redis://hr_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://hr_redis:6379/0
      - REDIS_URL=redis://hr_redis:6379/1
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,https://crm-frontend-react.vercel.app,http://localhost:8000
      - TZ=UTC
      - RUN_MAIN_SERVICE=true
    volumes:
      - .:/app
      - ./hr_logs:/app/hr_logs
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    command: >
      bash -c "
      /app/wait-for-it.sh hr_postgres:5432 -t 60 &&
      gunicorn hr_service.wsgi:application --bind 0.0.0.0:8004 --workers=1 --timeout 300
      "
    depends_on:
      hr_postgres:
        condition: service_healthy
      hr_redis:
        condition: service_started
    networks:
      - auth_service_default
    restart: unless-stopped
    mem_limit: 4g
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/api/hr/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr-celery-worker
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=hr_service.settings
      - DB_ENGINE=django.db.backends.postgresql
      - HR_DB_NAME=hr_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=hr_postgres
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://hr_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://hr_redis:6379/0
      - REDIS_URL=redis://hr_redis:6379/1
      - TZ=UTC
    volumes:
      - .:/app
      - ./hr_logs:/app/hr_logs
    command: >
      bash -c "
      /app/wait-for-it.sh hr_postgres:5432 -t 60 &&
      celery -A hr_service worker --loglevel=info
      "
    depends_on:
      - hr-service
    networks:
      - auth_service_default
    restart: unless-stopped
    mem_limit: 2g
    healthcheck:
      test: ["CMD-SHELL", "celery -A hr_service inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr-celery-beat
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=hr_service.settings
      - DB_ENGINE=django.db.backends.postgresql
      - HR_DB_NAME=hr_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=hr_postgres
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://hr_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://hr_redis:6379/0
      - TZ=UTC
    volumes:
      - .:/app
      - ./hr_logs:/app/hr_logs
    command: >
      bash -c "
      /app/wait-for-it.sh hr_postgres:5432 -t 60 &&
      celery -A hr_service beat --loglevel=info
      "
    depends_on:
      - hr-service
    networks:
      - auth_service_default
    restart: unless-stopped
    mem_limit: 2g
    healthcheck:
      test: ["CMD-SHELL", "celery -A hr_service beat --loglevel=info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr-flower
    ports:
      - "5555:5555"
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=hr_service.settings
      - DB_ENGINE=django.db.backends.postgresql
      - HR_DB_NAME=hr_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=hr_postgres
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://hr_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://hr_redis:6379/0
      - REDIS_URL=redis://hr_redis:6379/1
      - TZ=UTC
    volumes:
      - .:/app
      - ./hr_logs:/app/hr_logs
    command: >
      bash -c "
      /app/wait-for-it.sh hr_postgres:5432 -t 60 &&
      celery --broker=redis://hr_redis:6379/0 flower --port=5555
      "
    depends_on:
      - hr-service
    networks:
      - auth_service_default
    restart: unless-stopped
    mem_limit: 512m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr-kafka-consumer
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=True
      - DB_ENGINE=django.db.backends.postgresql
      - HR_DB_NAME=hr_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=hr_postgres
      - DB_PORT=5432
      - DJANGO_SETTINGS_MODULE=hr_service.settings
      - PYTHONPATH=/app
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - .:/app
    command: >
      bash -c "
      /app/wait-for-it.sh hr_postgres:5432 -t 60 &&
      python -m hr.consumers
      "
    depends_on:
      - hr-service
    networks:
      - auth_service_default
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep python"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  hr_redis:
    image: redis:7-alpine
    container_name: hr_redis
    ports:
      - "6382:6379"
    volumes:
      - hr_redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - auth_service_default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  hr_postgres:
    image: postgres:15-alpine
    container_name: hr_postgres
    environment:
      - POSTGRES_DB=hr_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - TZ=UTC
      - POSTGRES_TIMEOUT=300
    ports:
      - "5435:5432"
    volumes:
      - hr_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hr_db"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - auth_service_default

networks:
  auth_service_default:
    external: true
    name: auth_service_default

volumes:
  hr_postgres_data:
    driver: local
  hr_redis_data:
    driver: local
