version: '3.8'

services:
  db:
    image: postgres:15
    container_name: auth_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-auth_db_prod}
      POSTGRES_USER: ${DB_USER:-postgres_prod}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your-secure-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: >
      postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - auth_service_default
    restart: always

  redis:
    image: redis:7-alpine
    container_name: auth_redis_prod
    command: >
      redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - auth_service_default
    restart: always

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - DEPLOYMENT_ENV=production
    container_name: auth-service-prod
    environment:
      - DEPLOYMENT_ENV=production
      - WEB_PAGE_URL=${WEB_PAGE_URL:-https://e3os.co.uk}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://e3os.co.uk,https://crm-frontend-react.vercel.app}
      - GLOBAL_ADMIN_EMAIL=${GLOBAL_ADMIN_EMAIL:-admin@yourdomain.com}
      - GLOBAL_ADMIN_PASSWORD=${GLOBAL_ADMIN_PASSWORD:-YourSecureAdminPassword2025!}
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    ports:
      - "8001:8001"
    env_file:              
      - ./.env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth_service_default
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/environment-info/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - DEPLOYMENT_ENV=production
    container_name: celery-worker-prod
    command: celery -A auth_service worker -l info --concurrency=8
    environment:
      - DEPLOYMENT_ENV=production
    env_file:
      - ./.env.production
    depends_on:
      auth-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth_service_default
    restart: always

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - DEPLOYMENT_ENV=production
    container_name: celery-beat-prod
    command: celery -A auth_service beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEPLOYMENT_ENV=production
    env_file:
      - ./.env.production
    depends_on:
      auth-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth_service_default
    restart: always

  key-rotator:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - DEPLOYMENT_ENV=production
    container_name: key-rotator-prod
    command: >
      sh -c "echo 'Key rotation scheduled for production - run manually or via cron job' && sleep infinity"
    environment:
      - DEPLOYMENT_ENV=production
    env_file:
      - ./.env.production
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - auth_service_default
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  auth_service_default:
    driver: bridge
    name: auth_service_default
