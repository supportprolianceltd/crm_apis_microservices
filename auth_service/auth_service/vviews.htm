<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cookie Auth Test</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      max-width: 900px;
      margin: 50px auto;
      padding: 20px;
      background: #f5f5f5;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    h1 {
      color: #333;
      border-bottom: 3px solid #4CAF50;
      padding-bottom: 10px;
    }
    .test-section {
      margin: 20px 0;
      padding: 20px;
      background: #f9f9f9;
      border-radius: 5px;
      border-left: 4px solid #2196F3;
    }
    button {
      background: #4CAF50;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      margin: 5px;
      transition: background 0.3s;
    }
    button:hover {
      background: #45a049;
    }
    button.secondary {
      background: #2196F3;
    }
    button.secondary:hover {
      background: #0b7dda;
    }
    input {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin: 5px;
      width: 250px;
    }
    .log {
      background: #1e1e1e;
      color: #d4d4d4;
      padding: 15px;
      border-radius: 5px;
      max-height: 400px;
      overflow-y: auto;
      font-family: 'Courier New', monospace;
      font-size: 13px;
      margin-top: 10px;
    }
    .log-entry {
      margin: 5px 0;
      padding: 5px;
      border-left: 3px solid #4CAF50;
      padding-left: 10px;
    }
    .log-error {
      border-left-color: #f44336;
    }
    .log-warning {
      border-left-color: #ff9800;
    }
    .status {
      display: inline-block;
      padding: 5px 10px;
      border-radius: 3px;
      margin: 5px 0;
      font-weight: bold;
    }
    .status.success { background: #4CAF50; color: white; }
    .status.error { background: #f44336; color: white; }
    .status.info { background: #2196F3; color: white; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üç™ Cookie Authentication Test Suite</h1>
    
    <div class="test-section">
      <h3>1. Environment Check</h3>
      <button onclick="checkEnvironment()">Check Environment</button>
      <button onclick="checkCookies()" class="secondary">Check All Cookies</button>
    </div>

    <div class="test-section">
      <h3>2. Simple Cookie Test</h3>
      <button onclick="testSimpleCookie()">Test Set-Cookie (Debug)</button>
      <button onclick="testSetCookies()" class="secondary">Test Auth Cookies</button>
    </div>

    <div class="test-section">
      <h3>3. Login Test</h3>
      <div>
        <input type="email" id="email" placeholder="Email" value="admin@example.com">
        <input type="password" id="password" placeholder="Password" value="password123">
      </div>
      <button onclick="testLogin()">Login & Check Cookies</button>
    </div>

    <div class="test-section">
      <h3>4. Token Validation</h3>
      <button onclick="testValidation()">Validate Token (Cookie Mode)</button>
      <button onclick="testValidationWithBearer()" class="secondary">Test Bearer Token</button>
    </div>

    <div class="test-section">
      <h3>5. Logout Test</h3>
      <button onclick="testLogout()" style="background: #f44336;">Logout</button>
    </div>

    <div class="test-section">
      <h3>üìã Test Log</h3>
      <button onclick="clearLog()" style="background: #666;">Clear Log</button>
      <div id="log" class="log"></div>
    </div>
  </div>

  <script>
    const API_BASE = 'http://localhost:9090';
    
    function log(message, type = 'info') {
      const logDiv = document.getElementById('log');
      const entry = document.createElement('div');
      entry.className = `log-entry log-${type}`;
      entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
      logDiv.appendChild(entry);
      logDiv.scrollTop = logDiv.scrollHeight;
      console.log(message);
    }

    function clearLog() {
      document.getElementById('log').innerHTML = '';
    }

    async function checkEnvironment() {
      log('üîç Checking environment...', 'info');
      log(`Current URL: ${window.location.href}`);
      log(`API Base: ${API_BASE}`);
      
      try {
        const response = await fetch(`${API_BASE}/api/tenant/environment-info/`, {
          credentials: 'include'
        });
        const data = await response.json();
        log('‚úÖ Environment info received:', 'info');
        log(JSON.stringify(data, null, 2));
      } catch (error) {
        log(`‚ùå Error: ${error.message}`, 'error');
      }
    }

    function checkCookies() {
      log('üç™ Checking document.cookie...', 'info');
      const cookies = document.cookie;
      if (cookies) {
        log(`Found cookies: ${cookies}`);
        log('‚ö†Ô∏è Note: HttpOnly cookies (access_token, refresh_token) will NOT appear here!', 'warning');
      } else {
        log('No cookies visible in document.cookie', 'warning');
        log('This is NORMAL if cookies are HttpOnly!', 'info');
      }
    }

    async function testSimpleCookie() {
      log('üß™ Testing simple cookie endpoint...', 'info');
      
      try {
        const response = await fetch(`${API_BASE}/api/simple-cookie-test/`, {
          credentials: 'include'
        });
        const data = await response.json();
        log(`‚úÖ Response: ${JSON.stringify(data)}`);
        
        // Check if we can see the non-HttpOnly cookie
        setTimeout(() => {
          log('Checking if simple_test cookie is visible...');
          checkCookies();
        }, 100);
      } catch (error) {
        log(`‚ùå Error: ${error.message}`, 'error');
      }
    }

    async function testSetCookies() {
      log('üç™ Testing auth cookie setting...', 'info');
      
      try {
        const response = await fetch(`${API_BASE}/api/test-cookies/`, {
          method: 'POST',
          credentials: 'include'
        });
        const data = await response.json();
        log(`‚úÖ Response: ${JSON.stringify(data)}`);
        
        // The cookies are set but we can't see HttpOnly ones
        setTimeout(() => {
          log('‚ö†Ô∏è Auth cookies are HttpOnly - checking with validation...', 'warning');
          testValidation();
        }, 200);
      } catch (error) {
        log(`‚ùå Error: ${error.message}`, 'error');
      }
    }

    async function testLogin() {
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      
      log(`üîê Attempting login with ${email}...`, 'info');
      
      try {
        const response = await fetch(`${API_BASE}/api/token/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({ email, password })
        });
        
        if (response.ok) {
          const data = await response.json();
          log('‚úÖ Login successful!', 'info');
          log(`User: ${data.user?.email || 'Unknown'}`);
          log(`Tenant: ${data.tenant_name || 'Unknown'}`);
          
          // Check cookies after a short delay
          setTimeout(() => {
            log('Checking cookies after login...');
            checkCookies();
            log('Testing token validation with cookies...');
            testValidation();
          }, 200);
        } else {
          const errorData = await response.text();
          log(`‚ùå Login failed: ${response.status}`, 'error');
          log(errorData, 'error');
        }
      } catch (error) {
        log(`‚ùå Network error: ${error.message}`, 'error');
      }
    }

    async function testValidation() {
      log('üîç Validating token with cookies...', 'info');
      
      try {
        const response = await fetch(`${API_BASE}/api/token/validate/`, {
          method: 'GET',
          credentials: 'include'  // This sends HttpOnly cookies
        });
        
        if (response.ok) {
          const data = await response.json();
          log('‚úÖ Token is valid!', 'info');
          log(`User: ${data.user?.email}`);
          log(`Tenant: ${data.tenant_name}`);
          log('üéâ COOKIES ARE WORKING!', 'info');
        } else {
          log(`‚ùå Validation failed: ${response.status}`, 'error');
          const errorData = await response.text();
          log(errorData, 'error');
        }
      } catch (error) {
        log(`‚ùå Error: ${error.message}`, 'error');
      }
    }

    async function testValidationWithBearer() {
      const token = prompt('Enter access token:');
      if (!token) return;
      
      log('üîç Validating with Bearer token...', 'info');
      
      try {
        const response = await fetch(`${API_BASE}/api/token/validate/`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          log('‚úÖ Bearer token is valid!', 'info');
          log(JSON.stringify(data, null, 2));
        } else {
          log(`‚ùå Validation failed: ${response.status}`, 'error');
        }
      } catch (error) {
        log(`‚ùå Error: ${error.message}`, 'error');
      }
    }

    async function testLogout() {
      log('üö™ Logging out...', 'info');
      
      try {
        const response = await fetch(`${API_BASE}/api/logout/`, {
          method: 'POST',
          credentials: 'include'
        });
        
        if (response.ok) {
          log('‚úÖ Logged out successfully', 'info');
          setTimeout(() => {
            log('Checking if cookies were cleared...');
            checkCookies();
          }, 100);
        } else {
          log(`‚ùå Logout failed: ${response.status}`, 'error');
        }
      } catch (error) {
        log(`‚ùå Error: ${error.message}`, 'error');
      }
    }

    // Auto-check environment on load
    window.addEventListener('load', () => {
      log('üöÄ Cookie Test Suite Loaded', 'info');
      log('Ready to test cookie authentication!');
      checkEnvironment();
    });
  </script>
</body>
</html>