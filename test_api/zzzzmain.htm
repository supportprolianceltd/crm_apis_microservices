<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="robots" content="NONE,NOARCHIVE">
    <title>ProgrammingError
      at /api/lms/courses/courses/</title>
    <style>
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font-family: sans-serif; background-color:#fff; color:#000; }
    body > :where(header, main, footer) { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; word-break: break-word; }
    summary { cursor: pointer; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size: 0.6875rem; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 10px 2px 40px; width: auto; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.cause { word-break: break-word; }
    ul.traceback li.frame { padding-bottom:1em; color:#4f4f4f; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#464646; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands, summary.commands { margin-left: 40px; }
    div.commands a, summary.commands { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #info { padding: 0; }
    #info > * { padding:10px 20px; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size: 0.7rem; font-weight:normal; }
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #575757; font-size: 1.5rem; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
    .fname { user-select: all; }
  </style>

    <script>
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(document.querySelectorAll('ol.pre-context'));
      hideAll(document.querySelectorAll('ol.post-context'));
      hideAll(document.querySelectorAll('div.pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
  </script>

  </head>
  <body>
    <header id="summary">
      <h1>ProgrammingError
        at /api/lms/courses/courses/</h1>
      <pre
        class="exception_value">relation &quot;courses_course&quot; does not exist
LINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...
                                                             ^
</pre>
      <table class="meta">

        <tr>
          <th scope="row">Request Method:</th>
          <td>GET</td>
        </tr>
        <tr>
          <th scope="row">Request URL:</th>
          <td>http://lms-app/api/lms/courses/courses/</td>
        </tr>

        <tr>
          <th scope="row">Django Version:</th>
          <td>5.2.2</td>
        </tr>

        <tr>
          <th scope="row">Exception Type:</th>
          <td>ProgrammingError</td>
        </tr>

        <tr>
          <th scope="row">Exception Value:</th>
          <td><pre>relation &quot;courses_course&quot; does not exist
LINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...
                                                             ^
</pre></td>
        </tr>

        <tr>
          <th scope="row">Exception Location:</th>
          <td><span
              class="fname">/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py</span>,
            line 105, in _execute</td>
        </tr>

        <tr>
          <th scope="row">Raised during:</th>
          <td>courses.views.CourseViewSet</td>
        </tr>

        <tr>
          <th scope="row">Python Executable:</th>
          <td>/usr/local/bin/python3.11</td>
        </tr>
        <tr>
          <th scope="row">Python Version:</th>
          <td>3.11.13</td>
        </tr>
        <tr>
          <th scope="row">Python Path:</th>
          <td><pre><code>[&#x27;/app&#x27;,
 &#x27;/usr/local/bin&#x27;,
 &#x27;/usr/local/lib/python311.zip&#x27;,
 &#x27;/usr/local/lib/python3.11&#x27;,
 &#x27;/usr/local/lib/python3.11/lib-dynload&#x27;,
 &#x27;/usr/local/lib/python3.11/site-packages&#x27;]</code></pre></td>
        </tr>
        <tr>
          <th scope="row">Server time:</th>
          <td>Tue, 23 Sep 2025 12:35:05 +0000</td>
        </tr>
      </table>
    </header>

    <main id="info">

      <div id="traceback">
        <h2>Traceback <span class="commands"><a href="#" role="button"
              onclick="return switchPastebinFriendly(this);">
              Switch to copy-and-paste view</a></span>
        </h2>
        <div id="browserTraceback">
          <ul class="traceback">

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py</code>,
              line 105, in _execute

              <div class="context" id="c135134768169600">

                <ol start="98" class="pre-context" id="pre135134768169600">

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        self.db.validate_no_broken_transaction()</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        with self.db.wrap_database_errors:</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            if params is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>                # params default might be backend specific.</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>                return self.cursor.execute(sql)</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            else:</pre></li>

                </ol>

                <ol start="105" class="context-line">
                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>                return self.cursor.execute(sql, params)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='106' class="post-context" id="post135134768169600">

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>    def _executemany(self, sql, param_list, *ignored_wrapper_args):</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        # ever set during testing).</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169600">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>ignored_wrapper_args</td>
                      <td class="code"><pre>(False,
 {&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;postgresql&#x27; alias=&#x27;default&#x27;&gt;,
  &#x27;cursor&#x27;: &lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;})</pre></td>
                    </tr>

                    <tr>
                      <td>params</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>sql</td>
                      <td
                        class="code"><pre>(&#x27;SELECT COUNT(*) FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &#x27;
 &#x27;&quot;courses_course&quot; LEFT OUTER JOIN &quot;courses_enrollment&quot; ON &#x27;
 &#x27;(&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_enrollment&quot;.&quot;course_id&quot;) LEFT OUTER JOIN &#x27;
 &#x27;&quot;courses_faq&quot; ON (&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_faq&quot;.&quot;course_id&quot;) GROUP &#x27;
 &#x27;BY 1) subquery&#x27;)</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="cause"><h3>

                The above exception (relation &quot;courses_course&quot; does
                not exist
                LINE 1: ...FROM (SELECT
                &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot;
                FROM &quot;courses_c...
                ^
                ) was the direct cause of the following exception:

              </h3></li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/core/handlers/exception.py</code>,
              line 55, in inner

              <div class="context" id="c135134768170944">

                <ol start="48" class="pre-context" id="pre135134768170944">

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>        return inner</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>    else:</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>        @wraps(get_response)</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>        def inner(request):</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>            try:</pre></li>

                </ol>

                <ol start="55" class="context-line">
                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>                response = get_response(request)
                               ^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='56' class="post-context" id="post135134768170944">

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>            except Exception as exc:</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>                response = response_for_exception(request, exc)</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>            return response</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre>        return inner</pre></li>

                  <li
                    onclick="toggle('pre135134768170944', 'post135134768170944')"><pre></pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170944">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>exc</td>
                      <td
                        class="code"><pre>ProgrammingError(&#x27;relation &quot;courses_course&quot; does not exist\nLINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...\n                                                             ^\n&#x27;)</pre></td>
                    </tr>

                    <tr>
                      <td>get_response</td>
                      <td
                        class="code"><pre>&lt;bound method BaseHandler._get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7ae7873b13d0&gt;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;WSGIRequest: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/core/handlers/base.py</code>,
              line 197, in _get_response

              <div class="context" id="c135134768170880">

                <ol start="190" class="pre-context" id="pre135134768170880">

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>        if response is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>            # If it is an asynchronous view, run it in a subthread.</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>            if iscoroutinefunction(wrapped_callback):</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>                wrapped_callback = async_to_sync(wrapped_callback)</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>            try:</pre></li>

                </ol>

                <ol start="197" class="context-line">
                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='198' class="post-context" id="post135134768170880">

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>            except Exception as e:</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>                if response is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>                    raise</pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170880', 'post135134768170880')"><pre>        # Complain if the view returned None (a common error).</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170880">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>callback</td>
                      <td
                        class="code"><pre>&lt;function CourseViewSet at 0x7ae784035080&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>callback_args</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>callback_kwargs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>middleware_method</td>
                      <td
                        class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;CsrfViewMiddleware get_response=convert_exception_to_response.&lt;locals&gt;.inner&gt;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;WSGIRequest: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>response</td>
                      <td class="code"><pre>None</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7ae7873b13d0&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>wrapped_callback</td>
                      <td
                        class="code"><pre>&lt;function CourseViewSet at 0x7ae784035080&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/views/decorators/csrf.py</code>,
              line 65, in _view_wrapper

              <div class="context" id="c135134768170816">

                <ol start="58" class="pre-context" id="pre135134768170816">

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre>        async def _view_wrapper(request, *args, **kwargs):</pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre>            return await view_func(request, *args, **kwargs)</pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre>    else:</pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre>        def _view_wrapper(request, *args, **kwargs):</pre></li>

                </ol>

                <ol start="65" class="context-line">
                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre>            return view_func(request, *args, **kwargs)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='66' class="post-context" id="post135134768170816">

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre>    _view_wrapper.csrf_exempt = True</pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170816', 'post135134768170816')"><pre>    return wraps(view_func)(_view_wrapper)</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170816">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>args</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>kwargs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;WSGIRequest: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>view_func</td>
                      <td
                        class="code"><pre>&lt;function CourseViewSet at 0x7ae7855efe20&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/viewsets.py</code>,
              line 125, in view

              <div class="context" id="c135134768075648">

                <ol start="118" class="pre-context" id="pre135134768075648">

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>                setattr(self, method, handler)</pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>            self.request = request</pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>            self.args = args</pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>            self.kwargs = kwargs</pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>            # And continue as usual</pre></li>

                </ol>

                <ol start="125" class="context-line">
                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>            return self.dispatch(request, *args, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='126' class="post-context" id="post135134768075648">

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>        # take name and docstring from class</pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>        update_wrapper(view, cls, updated=())</pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>        # and possible attributes set by decorators</pre></li>

                  <li
                    onclick="toggle('pre135134768075648', 'post135134768075648')"><pre>        # like csrf_exempt from dispatch</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768075648">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>action</td>
                      <td class="code"><pre>&#x27;list&#x27;</pre></td>
                    </tr>

                    <tr>
                      <td>actions</td>
                      <td
                        class="code"><pre>{&#x27;get&#x27;: &#x27;list&#x27;, &#x27;head&#x27;: &#x27;list&#x27;, &#x27;post&#x27;: &#x27;create&#x27;}</pre></td>
                    </tr>

                    <tr>
                      <td>args</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>cls</td>
                      <td
                        class="code"><pre>&lt;class &#x27;courses.views.CourseViewSet&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>handler</td>
                      <td
                        class="code"><pre>&lt;bound method CourseViewSet.list of &lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>initkwargs</td>
                      <td
                        class="code"><pre>{&#x27;basename&#x27;: &#x27;courses&#x27;, &#x27;detail&#x27;: False, &#x27;suffix&#x27;: &#x27;List&#x27;}</pre></td>
                    </tr>

                    <tr>
                      <td>kwargs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>method</td>
                      <td class="code"><pre>&#x27;head&#x27;</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;WSGIRequest: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/views.py</code>,
              line 515, in dispatch

              <div class="context" id="c135134768134656">

                <ol start="508" class="pre-context" id="pre135134768134656">

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>                                  self.http_method_not_allowed)</pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>            else:</pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>                handler = self.http_method_not_allowed</pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>            response = handler(request, *args, **kwargs)</pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>        except Exception as exc:</pre></li>

                </ol>

                <ol start="515" class="context-line">
                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>            response = self.handle_exception(exc)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='516' class="post-context" id="post135134768134656">

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>        return self.response</pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>    def options(self, request, *args, **kwargs):</pre></li>

                  <li
                    onclick="toggle('pre135134768134656', 'post135134768134656')"><pre>        &quot;&quot;&quot;</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768134656">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>args</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>handler</td>
                      <td
                        class="code"><pre>&lt;bound method CourseViewSet.list of &lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>kwargs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;rest_framework.request.Request: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/views.py</code>,
              line 475, in handle_exception

              <div class="context" id="c135134768135616">

                <ol start="468" class="pre-context" id="pre135134768135616">

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>        exception_handler = self.get_exception_handler()</pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>        context = self.get_exception_handler_context()</pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>        response = exception_handler(exc, context)</pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>        if response is None:</pre></li>

                </ol>

                <ol start="475" class="context-line">
                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>            self.raise_uncaught_exception(exc)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='476' class="post-context" id="post135134768135616">

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>        response.exception = True</pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>        return response</pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>

                  <li
                    onclick="toggle('pre135134768135616', 'post135134768135616')"><pre>        if settings.DEBUG:</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768135616">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>context</td>
                      <td class="code"><pre>{&#x27;args&#x27;: (),
 &#x27;kwargs&#x27;: {},
 &#x27;request&#x27;: &lt;rest_framework.request.Request: GET &#x27;/api/lms/courses/courses/&#x27;&gt;,
 &#x27;view&#x27;: &lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;}</pre></td>
                    </tr>

                    <tr>
                      <td>exc</td>
                      <td
                        class="code"><pre>ProgrammingError(&#x27;relation &quot;courses_course&quot; does not exist\nLINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...\n                                                             ^\n&#x27;)</pre></td>
                    </tr>

                    <tr>
                      <td>exception_handler</td>
                      <td
                        class="code"><pre>&lt;function exception_handler at 0x7ae785972f20&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>response</td>
                      <td class="code"><pre>None</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/views.py</code>,
              line 486, in raise_uncaught_exception

              <div class="context" id="c135134770075456">

                <ol start="479" class="pre-context" id="pre135134770075456">

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>        if settings.DEBUG:</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>            request = self.request</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>            renderer_format = getattr(request.accepted_renderer, &#x27;format&#x27;)</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>            use_plaintext_traceback = renderer_format not in (&#x27;html&#x27;, &#x27;api&#x27;, &#x27;admin&#x27;)</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>            request.force_plaintext_errors(use_plaintext_traceback)</pre></li>

                </ol>

                <ol start="486" class="context-line">
                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>        raise exc
             ^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='487' class="post-context" id="post135134770075456">

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>    # Note: Views are made CSRF exempt from within `as_view` as to prevent</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>    # accidental removal of this exemption in cases where `dispatch` needs to</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>    # be overridden.</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>    def dispatch(self, request, *args, **kwargs):</pre></li>

                  <li
                    onclick="toggle('pre135134770075456', 'post135134770075456')"><pre>        &quot;&quot;&quot;</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134770075456">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>exc</td>
                      <td
                        class="code"><pre>ProgrammingError(&#x27;relation &quot;courses_course&quot; does not exist\nLINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...\n                                                             ^\n&#x27;)</pre></td>
                    </tr>

                    <tr>
                      <td>renderer_format</td>
                      <td class="code"><pre>&#x27;json&#x27;</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;rest_framework.request.Request: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>use_plaintext_traceback</td>
                      <td class="code"><pre>True</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/views.py</code>,
              line 512, in dispatch

              <div class="context" id="c135134768078336">

                <ol start="505" class="pre-context" id="pre135134768078336">

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>            # Get the appropriate handler method</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>                                  self.http_method_not_allowed)</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>            else:</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>                handler = self.http_method_not_allowed</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre></pre></li>

                </ol>

                <ol start="512" class="context-line">
                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>            response = handler(request, *args, **kwargs)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='513' class="post-context" id="post135134768078336">

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>        except Exception as exc:</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>            response = self.handle_exception(exc)</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>

                  <li
                    onclick="toggle('pre135134768078336', 'post135134768078336')"><pre>        return self.response</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768078336">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>args</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>handler</td>
                      <td
                        class="code"><pre>&lt;bound method CourseViewSet.list of &lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>kwargs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;rest_framework.request.Request: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code class="fname">/app/courses/views.py</code>, line 392, in
              list

              <div class="context" id="c135134768077824">

                <ol start="385" class="pre-context" id="pre135134768077824">

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>                {&quot;detail&quot;: &quot;Error fetching least popular course&quot;},</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>                status=status.HTTP_500_INTERNAL_SERVER_ERROR</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>            )</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>    def list(self, request, *args, **kwargs):</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>        tenant = request.tenant</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>        with tenant_context(tenant):</pre></li>

                </ol>

                <ol start="392" class="context-line">
                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>            response = super().list(request, *args, **kwargs)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='393' class="post-context" id="post135134768077824">

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>            response.data[&#x27;total_all_enrollments&#x27;] = Enrollment.objects.count()</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>            logger.info(f&quot;[{tenant.schema_name}] Listed courses with {response.data[&#x27;total_all_enrollments&#x27;]} total enrollments&quot;)</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>            return response</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>    # def get_permissions(self):</pre></li>

                  <li
                    onclick="toggle('pre135134768077824', 'post135134768077824')"><pre>    #     return [IsAdminUser()] if self.action in [&#x27;create&#x27;, &#x27;update&#x27;, &#x27;partial_update&#x27;, &#x27;destroy&#x27;, &#x27;assign_instructor&#x27;, &#x27;update_instructor_assignment&#x27;, &#x27;remove_instructor&#x27;] else [IsAuthenticated()]</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768077824">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>__class__</td>
                      <td
                        class="code"><pre>&lt;class &#x27;courses.views.CourseViewSet&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>args</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>kwargs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;rest_framework.request.Request: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>tenant</td>
                      <td
                        class="code"><pre>&lt;class &#x27;complete_lms.middleware.Tenant&#x27;&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/mixins.py</code>,
              line 40, in list

              <div class="context" id="c135134768170752">

                <ol start="33" class="pre-context" id="pre135134768170752">

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>class ListModelMixin:</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>    &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>    List a queryset.</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>    &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>    def list(self, request, *args, **kwargs):</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>        queryset = self.filter_queryset(self.get_queryset())</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre></pre></li>

                </ol>

                <ol start="40" class="context-line">
                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>        page = self.paginate_queryset(queryset)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='41' class="post-context" id="post135134768170752">

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>        if page is not None:</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>            serializer = self.get_serializer(page, many=True)</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>            return self.get_paginated_response(serializer.data)</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>        serializer = self.get_serializer(queryset, many=True)</pre></li>

                  <li
                    onclick="toggle('pre135134768170752', 'post135134768170752')"><pre>        return Response(serializer.data)</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170752">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>args</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>kwargs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>queryset</td>
                      <td
                        class="code"><pre>Error in formatting: ProgrammingError: relation &quot;courses_course&quot; does not exist
LINE 1: ...ription&quot;, &quot;courses_category&quot;.&quot;created_by_id&quot; FROM &quot;courses_c...
                                                             ^
</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;rest_framework.request.Request: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/generics.py</code>,
              line 175, in paginate_queryset

              <div class="context" id="c135134768170688">

                <ol start="168" class="pre-context" id="pre135134768170688">

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>    def paginate_queryset(self, queryset):</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        Return a single page of results, or `None` if pagination is disabled.</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        if self.paginator is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>            return None</pre></li>

                </ol>

                <ol start="175" class="context-line">
                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        return self.paginator.paginate_queryset(queryset, self.request, view=self)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='176' class="post-context" id="post135134768170688">

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>    def get_paginated_response(self, data):</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        Return a paginated style `Response` object for the given output data.</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170688', 'post135134768170688')"><pre>        assert self.paginator is not None</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170688">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>queryset</td>
                      <td
                        class="code"><pre>Error in formatting: ProgrammingError: relation &quot;courses_course&quot; does not exist
LINE 1: ...ription&quot;, &quot;courses_category&quot;.&quot;created_by_id&quot; FROM &quot;courses_c...
                                                             ^
</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame user">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/rest_framework/pagination.py</code>,
              line 211, in paginate_queryset

              <div class="context" id="c135134768170624">

                <ol start="204" class="pre-context" id="pre135134768170624">

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>        if not page_size:</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>            return None</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>        paginator = self.django_paginator_class(queryset, page_size)</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>        page_number = self.get_page_number(request, paginator)</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>        try:</pre></li>

                </ol>

                <ol start="211" class="context-line">
                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>            self.page = paginator.page(page_number)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='212' class="post-context" id="post135134768170624">

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>        except InvalidPage as exc:</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>            msg = self.invalid_page_message.format(</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>                page_number=page_number, message=str(exc)</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>            )</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre>            raise NotFound(msg)</pre></li>

                  <li
                    onclick="toggle('pre135134768170624', 'post135134768170624')"><pre></pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170624">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>page_number</td>
                      <td class="code"><pre>1</pre></td>
                    </tr>

                    <tr>
                      <td>page_size</td>
                      <td class="code"><pre>10</pre></td>
                    </tr>

                    <tr>
                      <td>paginator</td>
                      <td
                        class="code"><pre>&lt;django.core.paginator.Paginator object at 0x7ae783d92610&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>queryset</td>
                      <td
                        class="code"><pre>Error in formatting: ProgrammingError: relation &quot;courses_course&quot; does not exist
LINE 1: ...ription&quot;, &quot;courses_category&quot;.&quot;created_by_id&quot; FROM &quot;courses_c...
                                                             ^
</pre></td>
                    </tr>

                    <tr>
                      <td>request</td>
                      <td
                        class="code"><pre>&lt;rest_framework.request.Request: GET &#x27;/api/lms/courses/courses/&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;courses.views.StandardResultsPagination object at 0x7ae783d90c10&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>view</td>
                      <td
                        class="code"><pre>&lt;courses.views.CourseViewSet object at 0x7ae783d917d0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/core/paginator.py</code>,
              line 89, in page

              <div class="context" id="c135134768170560">

                <ol start="82" class="pre-context" id="pre135134768170560">

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>            number = 1</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        except EmptyPage:</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>            number = self.num_pages</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        return self.page(number)</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>    def page(self, number):</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        &quot;&quot;&quot;Return a Page object for the given 1-based page number.&quot;&quot;&quot;</pre></li>

                </ol>

                <ol start="89" class="context-line">
                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        number = self.validate_number(number)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='90' class="post-context" id="post135134768170560">

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        bottom = (number - 1) * self.per_page</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        top = bottom + self.per_page</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        if top + self.orphans &gt;= self.count:</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>            top = self.count</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre>        return self._get_page(self.object_list[bottom:top], number, self)</pre></li>

                  <li
                    onclick="toggle('pre135134768170560', 'post135134768170560')"><pre></pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170560">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>number</td>
                      <td class="code"><pre>1</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.core.paginator.Paginator object at 0x7ae783d92610&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/core/paginator.py</code>,
              line 70, in validate_number

              <div class="context" id="c135134768170496">

                <ol start="63" class="pre-context" id="pre135134768170496">

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>            if isinstance(number, float) and not number.is_integer():</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>                raise ValueError</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>            number = int(number)</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>        except (TypeError, ValueError):</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>            raise PageNotAnInteger(self.error_messages[&quot;invalid_page&quot;])</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>        if number &lt; 1:</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>            raise EmptyPage(self.error_messages[&quot;min_page&quot;])</pre></li>

                </ol>

                <ol start="70" class="context-line">
                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>        if number &gt; self.num_pages:
                        ^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='71' class="post-context" id="post135134768170496">

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>            raise EmptyPage(self.error_messages[&quot;no_results&quot;])</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>        return number</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>    def get_page(self, number):</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170496', 'post135134768170496')"><pre>        Return a valid page, even if the page argument isn&#x27;t a number or isn&#x27;t</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170496">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>number</td>
                      <td class="code"><pre>1</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.core.paginator.Paginator object at 0x7ae783d92610&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/utils/functional.py</code>,
              line 47, in __get__

              <div class="context" id="c135134768170432">

                <ol start="40" class="pre-context" id="pre135134768170432">

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        Call the function and put the return value in instance.__dict__ so that</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        subsequent attribute access on the instance returns the cached value</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        instead of calling cached_property.__get__().</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        if instance is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>            return self</pre></li>

                </ol>

                <ol start="47" class="context-line">
                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        res = instance.__dict__[self.name] = self.func(instance)
                                                 ^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='48' class="post-context" id="post135134768170432">

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>        return res</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>class classproperty:</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>    &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170432', 'post135134768170432')"><pre>    Decorator that converts a method with a single cls argument into a property</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170432">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>cls</td>
                      <td
                        class="code"><pre>&lt;class &#x27;django.core.paginator.Paginator&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>instance</td>
                      <td
                        class="code"><pre>&lt;django.core.paginator.Paginator object at 0x7ae783d92610&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.utils.functional.cached_property object at 0x7ae788b8bfd0&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/core/paginator.py</code>,
              line 116, in num_pages

              <div class="context" id="c135134768170368">

                <ol start="109" class="pre-context" id="pre135134768170368">

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>        if callable(c) and not inspect.isbuiltin(c) and method_has_no_args(c):</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>            return c()</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>        return len(self.object_list)</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>    @cached_property</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>    def num_pages(self):</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>        &quot;&quot;&quot;Return the total number of pages.&quot;&quot;&quot;</pre></li>

                </ol>

                <ol start="116" class="context-line">
                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>        if self.count == 0 and not self.allow_empty_first_page:
                ^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='117' class="post-context" id="post135134768170368">

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>            return 0</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>        hits = max(1, self.count - self.orphans)</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>        return ceil(hits / self.per_page)</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>    @property</pre></li>

                  <li
                    onclick="toggle('pre135134768170368', 'post135134768170368')"><pre>    def page_range(self):</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170368">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.core.paginator.Paginator object at 0x7ae783d92610&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/utils/functional.py</code>,
              line 47, in __get__

              <div class="context" id="c135134768170304">

                <ol start="40" class="pre-context" id="pre135134768170304">

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        Call the function and put the return value in instance.__dict__ so that</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        subsequent attribute access on the instance returns the cached value</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        instead of calling cached_property.__get__().</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        if instance is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>            return self</pre></li>

                </ol>

                <ol start="47" class="context-line">
                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        res = instance.__dict__[self.name] = self.func(instance)
                                                 ^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='48' class="post-context" id="post135134768170304">

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>        return res</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>class classproperty:</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>    &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170304', 'post135134768170304')"><pre>    Decorator that converts a method with a single cls argument into a property</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170304">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>cls</td>
                      <td
                        class="code"><pre>&lt;class &#x27;django.core.paginator.Paginator&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>instance</td>
                      <td
                        class="code"><pre>&lt;django.core.paginator.Paginator object at 0x7ae783d92610&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.utils.functional.cached_property object at 0x7ae788b8bf90&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/core/paginator.py</code>,
              line 110, in count

              <div class="context" id="c135134768170112">

                <ol start="103" class="pre-context" id="pre135134768170112">

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>        return Page(*args, **kwargs)</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>    @cached_property</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>    def count(self):</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>        &quot;&quot;&quot;Return the total number of objects, across all pages.&quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>        c = getattr(self.object_list, &quot;count&quot;, None)</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>        if callable(c) and not inspect.isbuiltin(c) and method_has_no_args(c):</pre></li>

                </ol>

                <ol start="110" class="context-line">
                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>            return c()
                        ^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='111' class="post-context" id="post135134768170112">

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>        return len(self.object_list)</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>    @cached_property</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>    def num_pages(self):</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>        &quot;&quot;&quot;Return the total number of pages.&quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170112', 'post135134768170112')"><pre>        if self.count == 0 and not self.allow_empty_first_page:</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170112">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>c</td>
                      <td
                        class="code"><pre>Error in formatting: ProgrammingError: relation &quot;courses_course&quot; does not exist
LINE 1: ...ription&quot;, &quot;courses_category&quot;.&quot;created_by_id&quot; FROM &quot;courses_c...
                                                             ^
</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.core.paginator.Paginator object at 0x7ae783d92610&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/models/query.py</code>,
              line 604, in count

              <div class="context" id="c135134768170240">

                <ol start="597" class="pre-context" id="pre135134768170240">

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>        If the QuerySet is already fully cached, return the length of the</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>        cached results set to avoid multiple SELECT COUNT(*) calls.</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>        if self._result_cache is not None:</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>            return len(self._result_cache)</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre></pre></li>

                </ol>

                <ol start="604" class="context-line">
                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>        return self.query.get_count(using=self.db)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='605' class="post-context" id="post135134768170240">

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>    async def acount(self):</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>        return await sync_to_async(self.count)()</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>    def get(self, *args, **kwargs):</pre></li>

                  <li
                    onclick="toggle('pre135134768170240', 'post135134768170240')"><pre>        &quot;&quot;&quot;</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170240">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>Error in formatting: ProgrammingError: relation &quot;courses_course&quot; does not exist
LINE 1: ...ription&quot;, &quot;courses_category&quot;.&quot;created_by_id&quot; FROM &quot;courses_c...
                                                             ^
</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py</code>,
              line 644, in get_count

              <div class="context" id="c135134768169792">

                <ol start="637" class="pre-context" id="pre135134768169792">

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        return dict(zip(outer_query.annotation_select, result))</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>    def get_count(self, using):</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        Perform a COUNT() query using the current filter constraints.</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        &quot;&quot;&quot;</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        obj = self.clone()</pre></li>

                </ol>

                <ol start="644" class="context-line">
                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        return obj.get_aggregation(using, {&quot;__count&quot;: Count(&quot;*&quot;)})[&quot;__count&quot;]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='645' class="post-context" id="post135134768169792">

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>    def has_filters(self):</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        return self.where</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>    def exists(self, limit=True):</pre></li>

                  <li
                    onclick="toggle('pre135134768169792', 'post135134768169792')"><pre>        q = self.clone()</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169792">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>obj</td>
                      <td
                        class="code"><pre>&lt;django.db.models.sql.query.Query object at 0x7ae783d92010&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.models.sql.query.Query object at 0x7ae783f796d0&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>using</td>
                      <td class="code"><pre>&#x27;default&#x27;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py</code>,
              line 626, in get_aggregation

              <div class="context" id="c135134768169280">

                <ol start="619" class="pre-context" id="pre135134768169280">

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        ]</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        elide_empty = not any(result is NotImplemented for result in empty_set_result)</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        outer_query.clear_ordering(force=True)</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        outer_query.clear_limits()</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        outer_query.select_for_update = False</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        outer_query.select_related = False</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        compiler = outer_query.get_compiler(using, elide_empty=elide_empty)</pre></li>

                </ol>

                <ol start="626" class="context-line">
                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        result = compiler.execute_sql(SINGLE)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='627' class="post-context" id="post135134768169280">

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        if result is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>            result = empty_set_result</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>        else:</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>            cols = outer_query.annotation_select.values()</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>            converters = compiler.get_converters(cols)</pre></li>

                  <li
                    onclick="toggle('pre135134768169280', 'post135134768169280')"><pre>            rows = compiler.apply_converters((result,), converters)</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169280">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>AggregateQuery</td>
                      <td
                        class="code"><pre>&lt;class &#x27;django.db.models.sql.subqueries.AggregateQuery&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>_</td>
                      <td
                        class="code"><pre>&lt;WhereNode: (AND: )&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>aggregate</td>
                      <td class="code"><pre>Count(&#x27;*&#x27;)</pre></td>
                    </tr>

                    <tr>
                      <td>aggregate_expr</td>
                      <td class="code"><pre>Count(&#x27;*&#x27;)</pre></td>
                    </tr>

                    <tr>
                      <td>aggregate_exprs</td>
                      <td
                        class="code"><pre>{&#x27;__count&#x27;: Count(&#x27;*&#x27;)}</pre></td>
                    </tr>

                    <tr>
                      <td>aggregate_refs</td>
                      <td class="code"><pre>set()</pre></td>
                    </tr>

                    <tr>
                      <td>aggregates</td>
                      <td
                        class="code"><pre>{&#x27;__count&#x27;: Count(&#x27;*&#x27;)}</pre></td>
                    </tr>

                    <tr>
                      <td>alias</td>
                      <td class="code"><pre>&#x27;__count&#x27;</pre></td>
                    </tr>

                    <tr>
                      <td>annotation</td>
                      <td
                        class="code"><pre>Count(Col(courses_faq, courses.FAQ.id), distinct=True)</pre></td>
                    </tr>

                    <tr>
                      <td>annotation_alias</td>
                      <td class="code"><pre>&#x27;faq_count&#x27;</pre></td>
                    </tr>

                    <tr>
                      <td>annotation_mask</td>
                      <td class="code"><pre>set()</pre></td>
                    </tr>

                    <tr>
                      <td>annotation_select_mask</td>
                      <td class="code"><pre>None</pre></td>
                    </tr>

                    <tr>
                      <td>col_refs</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>compiler</td>
                      <td
                        class="code"><pre>&lt;SQLAggregateCompiler model=Course connection=&lt;DatabaseWrapper vendor=&#x27;postgresql&#x27; alias=&#x27;default&#x27;&gt; using=&#x27;default&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>elide_empty</td>
                      <td class="code"><pre>True</pre></td>
                    </tr>

                    <tr>
                      <td>empty_set_result</td>
                      <td class="code"><pre>[0]</pre></td>
                    </tr>

                    <tr>
                      <td>has_existing_aggregation</td>
                      <td class="code"><pre>True</pre></td>
                    </tr>

                    <tr>
                      <td>having</td>
                      <td class="code"><pre>None</pre></td>
                    </tr>

                    <tr>
                      <td>inner_query</td>
                      <td
                        class="code"><pre>&lt;django.db.models.sql.query.Query object at 0x7ae783d9d490&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>outer_query</td>
                      <td
                        class="code"><pre>&lt;django.db.models.sql.subqueries.AggregateQuery object at 0x7ae783d9d8d0&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>qualify</td>
                      <td class="code"><pre>None</pre></td>
                    </tr>

                    <tr>
                      <td>refs_subquery</td>
                      <td class="code"><pre>False</pre></td>
                    </tr>

                    <tr>
                      <td>refs_window</td>
                      <td class="code"><pre>False</pre></td>
                    </tr>

                    <tr>
                      <td>replacements</td>
                      <td class="code"><pre>{}</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.models.sql.query.Query object at 0x7ae783d92010&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>set_returning_annotations</td>
                      <td class="code"><pre>set()</pre></td>
                    </tr>

                    <tr>
                      <td>using</td>
                      <td class="code"><pre>&#x27;default&#x27;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py</code>,
              line 1623, in execute_sql

              <div class="context" id="c135134768134848">

                <ol start="1616" class="pre-context" id="pre135134768134848">

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>            else:</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>                return</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>        if chunked_fetch:</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>            cursor = self.connection.chunked_cursor()</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>        else:</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>            cursor = self.connection.cursor()</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>        try:</pre></li>

                </ol>

                <ol start="1623" class="context-line">
                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>            cursor.execute(sql, params)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='1624' class="post-context" id="post135134768134848">

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>        except Exception:</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>            # Might fail for server-side cursors (e.g. connection closed)</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>            cursor.close()</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>            raise</pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768134848', 'post135134768134848')"><pre>        if result_type == ROW_COUNT:</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768134848">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>chunk_size</td>
                      <td class="code"><pre>100</pre></td>
                    </tr>

                    <tr>
                      <td>chunked_fetch</td>
                      <td class="code"><pre>False</pre></td>
                    </tr>

                    <tr>
                      <td>cursor</td>
                      <td
                        class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>params</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>result_type</td>
                      <td class="code"><pre>&#x27;single&#x27;</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;SQLAggregateCompiler model=Course connection=&lt;DatabaseWrapper vendor=&#x27;postgresql&#x27; alias=&#x27;default&#x27;&gt; using=&#x27;default&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>sql</td>
                      <td
                        class="code"><pre>(&#x27;SELECT COUNT(*) FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &#x27;
 &#x27;&quot;courses_course&quot; LEFT OUTER JOIN &quot;courses_enrollment&quot; ON &#x27;
 &#x27;(&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_enrollment&quot;.&quot;course_id&quot;) LEFT OUTER JOIN &#x27;
 &#x27;&quot;courses_faq&quot; ON (&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_faq&quot;.&quot;course_id&quot;) GROUP &#x27;
 &#x27;BY 1) subquery&#x27;)</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py</code>,
              line 122, in execute

              <div class="context" id="c135134768170048">

                <ol start="115" class="pre-context" id="pre135134768170048">

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>class CursorDebugWrapper(CursorWrapper):</pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>    # XXX callproc isn&#x27;t instrumented at this time.</pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>    def execute(self, sql, params=None):</pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>        with self.debug_sql(sql, params, use_last_executed_query=True):</pre></li>

                </ol>

                <ol start="122" class="context-line">
                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>            return super().execute(sql, params)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
                </ol>

                <ol start='123' class="post-context" id="post135134768170048">

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>    def executemany(self, sql, param_list):</pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>        with self.debug_sql(sql, param_list, many=True):</pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>            return super().executemany(sql, param_list)</pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768170048', 'post135134768170048')"><pre>    @contextmanager</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768170048">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>__class__</td>
                      <td
                        class="code"><pre>&lt;class &#x27;django.db.backends.utils.CursorDebugWrapper&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>params</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>sql</td>
                      <td
                        class="code"><pre>(&#x27;SELECT COUNT(*) FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &#x27;
 &#x27;&quot;courses_course&quot; LEFT OUTER JOIN &quot;courses_enrollment&quot; ON &#x27;
 &#x27;(&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_enrollment&quot;.&quot;course_id&quot;) LEFT OUTER JOIN &#x27;
 &#x27;&quot;courses_faq&quot; ON (&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_faq&quot;.&quot;course_id&quot;) GROUP &#x27;
 &#x27;BY 1) subquery&#x27;)</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py</code>,
              line 79, in execute

              <div class="context" id="c135134768169984">

                <ol start="72" class="pre-context" id="pre135134768169984">

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>            elif kparams is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>                return self.cursor.callproc(procname, params)</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>            else:</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>                params = params or ()</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>                return self.cursor.callproc(procname, params, kparams)</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>    def execute(self, sql, params=None):</pre></li>

                </ol>

                <ol start="79" class="context-line">
                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>        return self._execute_with_wrappers(
                   </pre> <span>â€¦</span></li>
                </ol>

                <ol start='80' class="post-context" id="post135134768169984">

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>            sql, params, many=False, executor=self._execute</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>        )</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>    def executemany(self, sql, param_list):</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>        return self._execute_with_wrappers(</pre></li>

                  <li
                    onclick="toggle('pre135134768169984', 'post135134768169984')"><pre>            sql, param_list, many=True, executor=self._executemany</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169984">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>params</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>sql</td>
                      <td
                        class="code"><pre>(&#x27;SELECT COUNT(*) FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &#x27;
 &#x27;&quot;courses_course&quot; LEFT OUTER JOIN &quot;courses_enrollment&quot; ON &#x27;
 &#x27;(&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_enrollment&quot;.&quot;course_id&quot;) LEFT OUTER JOIN &#x27;
 &#x27;&quot;courses_faq&quot; ON (&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_faq&quot;.&quot;course_id&quot;) GROUP &#x27;
 &#x27;BY 1) subquery&#x27;)</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py</code>,
              line 92, in _execute_with_wrappers

              <div class="context" id="c135134768169728">

                <ol start="85" class="pre-context" id="pre135134768169728">

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>            sql, param_list, many=True, executor=self._executemany</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>        )</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>    def _execute_with_wrappers(self, sql, params, many, executor):</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>        context = {&quot;connection&quot;: self.db, &quot;cursor&quot;: self}</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>        for wrapper in reversed(self.db.execute_wrappers):</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>            executor = functools.partial(wrapper, executor)</pre></li>

                </ol>

                <ol start="92" class="context-line">
                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>        return executor(sql, params, many, context)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='93' class="post-context" id="post135134768169728">

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>    def _execute(self, sql, params, *ignored_wrapper_args):</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>        # ever set during testing).</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>

                  <li
                    onclick="toggle('pre135134768169728', 'post135134768169728')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169728">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>context</td>
                      <td
                        class="code"><pre>{&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;postgresql&#x27; alias=&#x27;default&#x27;&gt;,
 &#x27;cursor&#x27;: &lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;}</pre></td>
                    </tr>

                    <tr>
                      <td>executor</td>
                      <td
                        class="code"><pre>&lt;bound method CursorWrapper._execute of &lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>many</td>
                      <td class="code"><pre>False</pre></td>
                    </tr>

                    <tr>
                      <td>params</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>sql</td>
                      <td
                        class="code"><pre>(&#x27;SELECT COUNT(*) FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &#x27;
 &#x27;&quot;courses_course&quot; LEFT OUTER JOIN &quot;courses_enrollment&quot; ON &#x27;
 &#x27;(&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_enrollment&quot;.&quot;course_id&quot;) LEFT OUTER JOIN &#x27;
 &#x27;&quot;courses_faq&quot; ON (&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_faq&quot;.&quot;course_id&quot;) GROUP &#x27;
 &#x27;BY 1) subquery&#x27;)</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py</code>,
              line 100, in _execute

              <div class="context" id="c135134768169920">

                <ol start="93" class="pre-context" id="pre135134768169920">

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>    def _execute(self, sql, params, *ignored_wrapper_args):</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>        # ever set during testing).</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>        self.db.validate_no_broken_transaction()</pre></li>

                </ol>

                <ol start="100" class="context-line">
                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>        with self.db.wrap_database_errors:
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='101' class="post-context" id="post135134768169920">

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>            if params is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>                # params default might be backend specific.</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>                return self.cursor.execute(sql)</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>            else:</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre>                return self.cursor.execute(sql, params)</pre></li>

                  <li
                    onclick="toggle('pre135134768169920', 'post135134768169920')"><pre></pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169920">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>ignored_wrapper_args</td>
                      <td class="code"><pre>(False,
 {&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;postgresql&#x27; alias=&#x27;default&#x27;&gt;,
  &#x27;cursor&#x27;: &lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;})</pre></td>
                    </tr>

                    <tr>
                      <td>params</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>sql</td>
                      <td
                        class="code"><pre>(&#x27;SELECT COUNT(*) FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &#x27;
 &#x27;&quot;courses_course&quot; LEFT OUTER JOIN &quot;courses_enrollment&quot; ON &#x27;
 &#x27;(&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_enrollment&quot;.&quot;course_id&quot;) LEFT OUTER JOIN &#x27;
 &#x27;&quot;courses_faq&quot; ON (&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_faq&quot;.&quot;course_id&quot;) GROUP &#x27;
 &#x27;BY 1) subquery&#x27;)</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/utils.py</code>,
              line 91, in __exit__

              <div class="context" id="c135134768169856">

                <ol start="84" class="pre-context" id="pre135134768169856">

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>            db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>            if issubclass(exc_type, db_exc_type):</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>                dj_exc_value = dj_exc_type(*exc_value.args)</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>                # Only set the &#x27;errors_occurred&#x27; flag for errors that may make</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>                # the connection unusable.</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>                if dj_exc_type not in (DataError, IntegrityError):</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>                    self.wrapper.errors_occurred = True</pre></li>

                </ol>

                <ol start="91" class="context-line">
                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>                raise dj_exc_value.with_traceback(traceback) from exc_value
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='92' class="post-context" id="post135134768169856">

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>    def __call__(self, func):</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>        # Note that we are intentionally not using @wraps here for performance</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>        # reasons. Refs #21109.</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>        def inner(*args, **kwargs):</pre></li>

                  <li
                    onclick="toggle('pre135134768169856', 'post135134768169856')"><pre>            with self:</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169856">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>db_exc_type</td>
                      <td
                        class="code"><pre>&lt;class &#x27;psycopg2.ProgrammingError&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>dj_exc_type</td>
                      <td
                        class="code"><pre>&lt;class &#x27;django.db.utils.ProgrammingError&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>dj_exc_value</td>
                      <td
                        class="code"><pre>ProgrammingError(&#x27;relation &quot;courses_course&quot; does not exist\nLINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...\n                                                             ^\n&#x27;)</pre></td>
                    </tr>

                    <tr>
                      <td>exc_type</td>
                      <td
                        class="code"><pre>&lt;class &#x27;psycopg2.errors.UndefinedTable&#x27;&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>exc_value</td>
                      <td
                        class="code"><pre>UndefinedTable(&#x27;relation &quot;courses_course&quot; does not exist\nLINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...\n                                                             ^\n&#x27;)</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.utils.DatabaseErrorWrapper object at 0x7ae783d9dd10&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>traceback</td>
                      <td
                        class="code"><pre>&lt;traceback object at 0x7ae783da8280&gt;</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

            <li class="frame django">

              <code
                class="fname">/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py</code>,
              line 105, in _execute

              <div class="context" id="c135134768169600">

                <ol start="98" class="pre-context" id="pre135134768169600">

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        self.db.validate_no_broken_transaction()</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        with self.db.wrap_database_errors:</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            if params is None:</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>                # params default might be backend specific.</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>                return self.cursor.execute(sql)</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            else:</pre></li>

                </ol>

                <ol start="105" class="context-line">
                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>                return self.cursor.execute(sql, params)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
                    <span>â€¦</span></li>
                </ol>

                <ol start='106' class="post-context" id="post135134768169600">

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre></pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>    def _executemany(self, sql, param_list, *ignored_wrapper_args):</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        # ever set during testing).</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>

                  <li
                    onclick="toggle('pre135134768169600', 'post135134768169600')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>

                </ol>

              </div>

              <details>
                <summary class="commands">Local vars</summary>

                <table class="vars" id="v135134768169600">
                  <thead>
                    <tr>
                      <th scope="col">Variable</th>
                      <th scope="col">Value</th>
                    </tr>
                  </thead>
                  <tbody>

                    <tr>
                      <td>ignored_wrapper_args</td>
                      <td class="code"><pre>(False,
 {&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;postgresql&#x27; alias=&#x27;default&#x27;&gt;,
  &#x27;cursor&#x27;: &lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;})</pre></td>
                    </tr>

                    <tr>
                      <td>params</td>
                      <td class="code"><pre>()</pre></td>
                    </tr>

                    <tr>
                      <td>self</td>
                      <td
                        class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0x7ae783d9fe90&gt;</pre></td>
                    </tr>

                    <tr>
                      <td>sql</td>
                      <td
                        class="code"><pre>(&#x27;SELECT COUNT(*) FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &#x27;
 &#x27;&quot;courses_course&quot; LEFT OUTER JOIN &quot;courses_enrollment&quot; ON &#x27;
 &#x27;(&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_enrollment&quot;.&quot;course_id&quot;) LEFT OUTER JOIN &#x27;
 &#x27;&quot;courses_faq&quot; ON (&quot;courses_course&quot;.&quot;id&quot; = &quot;courses_faq&quot;.&quot;course_id&quot;) GROUP &#x27;
 &#x27;BY 1) subquery&#x27;)</pre></td>
                    </tr>

                  </tbody>
                </table>
              </details>

            </li>

          </ul>
        </div>

        <form action="https://dpaste.com/" name="pasteform" id="pasteform"
          method="post">
          <div id="pastebinTraceback" class="pastebin">
            <input type="hidden" name="language" value="PythonConsole">
            <input type="hidden" name="title"
              value="ProgrammingError at /api/lms/courses/courses/">
            <input type="hidden" name="source" value="Django Dpaste Agent">
            <input type="hidden" name="poster" value="Django">
            <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: GET
Request URL: http://lms-app/api/lms/courses/courses/

Django Version: 5.2.2
Python Version: 3.11.13
Installed Applications:
[&#x27;django_tenants&#x27;,
 &#x27;shared&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;corsheaders&#x27;,
 &#x27;rest_framework&#x27;,
 &#x27;drf_spectacular&#x27;,
 &#x27;drf_yasg&#x27;,
 &#x27;django_filters&#x27;,
 &#x27;django_extensions&#x27;,
 &#x27;auditlog&#x27;,
 &#x27;courses&#x27;,
 &#x27;activitylog&#x27;,
 &#x27;schedule&#x27;,
 &#x27;payments&#x27;,
 &#x27;forum&#x27;,
 &#x27;groups&#x27;,
 &#x27;messaging&#x27;,
 &#x27;advert&#x27;,
 &#x27;ai_chat&#x27;,
 &#x27;carts&#x27;]
Installed Middleware:
[&#x27;complete_lms.middleware.MicroserviceRS256JWTMiddleware&#x27;,
 &#x27;complete_lms.middleware.CustomTenantSchemaMiddleware&#x27;,
 &#x27;corsheaders.middleware.CorsMiddleware&#x27;,
 &#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;]



Traceback (most recent call last):
  File "/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The above exception (relation &quot;courses_course&quot; does not exist
LINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...
                                                             ^
) was the direct cause of the following exception:
  File "/usr/local/lib/python3.11/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/views.py", line 515, in dispatch
    response = self.handle_exception(exc)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/views.py", line 475, in handle_exception
    self.raise_uncaught_exception(exc)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/views.py", line 486, in raise_uncaught_exception
    raise exc
    ^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/views.py", line 512, in dispatch
    response = handler(request, *args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/courses/views.py", line 392, in list
    response = super().list(request, *args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/mixins.py", line 40, in list
    page = self.paginate_queryset(queryset)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/generics.py", line 175, in paginate_queryset
    return self.paginator.paginate_queryset(queryset, self.request, view=self)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/rest_framework/pagination.py", line 211, in paginate_queryset
    self.page = paginator.page(page_number)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/core/paginator.py", line 89, in page
    number = self.validate_number(number)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/core/paginator.py", line 70, in validate_number
    if number &gt; self.num_pages:
                ^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/utils/functional.py", line 47, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
                                         ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/core/paginator.py", line 116, in num_pages
    if self.count == 0 and not self.allow_empty_first_page:
       ^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/utils/functional.py", line 47, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
                                         ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/core/paginator.py", line 110, in count
    return c()
           ^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/models/query.py", line 604, in count
    return self.query.get_count(using=self.db)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py", line 644, in get_count
    return obj.get_aggregation(using, {&quot;__count&quot;: Count(&quot;*&quot;)})[&quot;__count&quot;]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/models/sql/query.py", line 626, in get_aggregation
    result = compiler.execute_sql(SINGLE)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/models/sql/compiler.py", line 1623, in execute_sql
    cursor.execute(sql, params)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
           
  File "/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Exception Type: ProgrammingError at /api/lms/courses/courses/
Exception Value: relation &quot;courses_course&quot; does not exist
LINE 1: ...FROM (SELECT &quot;courses_course&quot;.&quot;id&quot; AS &quot;col1&quot; FROM &quot;courses_c...
                                                             ^

</textarea>
            <br><br>
            <input type="submit"
              value="Share this traceback on a public website">
          </div>
        </form>

      </div>

      <div id="requestinfo">
        <h2>Request information</h2>

        <h3 id="user-info">USER</h3>
        <p>AnonymousUser</p>

        <h3 id="get-info">GET</h3>

        <p>No GET data</p>

        <h3 id="post-info">POST</h3>

        <p>No POST data</p>

        <h3 id="files-info">FILES</h3>

        <p>No FILES data</p>

        <h3 id="cookie-info">COOKIES</h3>

        <p>No cookie data</p>

        <h3 id="meta-info">META</h3>
        <table class="req">
          <thead>
            <tr>
              <th scope="col">Variable</th>
              <th scope="col">Value</th>
            </tr>
          </thead>
          <tbody>

            <tr>
              <td>CONTENT_TYPE</td>
              <td class="code"><pre>&#x27;application/json&#x27;</pre></td>
            </tr>

            <tr>
              <td>HTTP_ACCEPT</td>
              <td class="code"><pre>&#x27;*/*&#x27;</pre></td>
            </tr>

            <tr>
              <td>HTTP_ACCEPT_ENCODING</td>
              <td class="code"><pre>&#x27;gzip, deflate, br&#x27;</pre></td>
            </tr>

            <tr>
              <td>HTTP_AUTHORIZATION</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>HTTP_CONNECTION</td>
              <td class="code"><pre>&#x27;close&#x27;</pre></td>
            </tr>

            <tr>
              <td>HTTP_HOST</td>
              <td class="code"><pre>&#x27;lms-app&#x27;</pre></td>
            </tr>

            <tr>
              <td>HTTP_USER_AGENT</td>
              <td
                class="code"><pre>&#x27;Thunder Client (https://www.thunderclient.com)&#x27;</pre></td>
            </tr>

            <tr>
              <td>PATH_INFO</td>
              <td
                class="code"><pre>&#x27;/api/lms/courses/courses/&#x27;</pre></td>
            </tr>

            <tr>
              <td>QUERY_STRING</td>
              <td class="code"><pre>&#x27;&#x27;</pre></td>
            </tr>

            <tr>
              <td>RAW_URI</td>
              <td
                class="code"><pre>&#x27;/api/lms/courses/courses/&#x27;</pre></td>
            </tr>

            <tr>
              <td>REMOTE_ADDR</td>
              <td class="code"><pre>&#x27;172.18.0.15&#x27;</pre></td>
            </tr>

            <tr>
              <td>REMOTE_PORT</td>
              <td class="code"><pre>&#x27;45654&#x27;</pre></td>
            </tr>

            <tr>
              <td>REQUEST_METHOD</td>
              <td class="code"><pre>&#x27;GET&#x27;</pre></td>
            </tr>

            <tr>
              <td>SCRIPT_NAME</td>
              <td class="code"><pre>&#x27;&#x27;</pre></td>
            </tr>

            <tr>
              <td>SERVER_NAME</td>
              <td class="code"><pre>&#x27;0.0.0.0&#x27;</pre></td>
            </tr>

            <tr>
              <td>SERVER_PORT</td>
              <td class="code"><pre>&#x27;8004&#x27;</pre></td>
            </tr>

            <tr>
              <td>SERVER_PROTOCOL</td>
              <td class="code"><pre>&#x27;HTTP/1.1&#x27;</pre></td>
            </tr>

            <tr>
              <td>SERVER_SOFTWARE</td>
              <td class="code"><pre>&#x27;gunicorn/23.0.0&#x27;</pre></td>
            </tr>

            <tr>
              <td>gunicorn.socket</td>
              <td
                class="code"><pre>&lt;socket.socket fd=10, family=2, type=1, proto=0, laddr=(&#x27;172.18.0.8&#x27;, 8004), raddr=(&#x27;172.18.0.15&#x27;, 45654)&gt;</pre></td>
            </tr>

            <tr>
              <td>wsgi.errors</td>
              <td
                class="code"><pre>&lt;gunicorn.http.wsgi.WSGIErrorsWrapper object at 0x7ae786fcd3c0&gt;</pre></td>
            </tr>

            <tr>
              <td>wsgi.file_wrapper</td>
              <td
                class="code"><pre>&lt;class &#x27;gunicorn.http.wsgi.FileWrapper&#x27;&gt;</pre></td>
            </tr>

            <tr>
              <td>wsgi.input</td>
              <td
                class="code"><pre>&lt;gunicorn.http.body.Body object at 0x7ae786fe8610&gt;</pre></td>
            </tr>

            <tr>
              <td>wsgi.input_terminated</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>wsgi.multiprocess</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>wsgi.multithread</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>wsgi.run_once</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>wsgi.url_scheme</td>
              <td class="code"><pre>&#x27;http&#x27;</pre></td>
            </tr>

            <tr>
              <td>wsgi.version</td>
              <td class="code"><pre>(1, 0)</pre></td>
            </tr>

          </tbody>
        </table>

        <h3 id="settings-info">Settings</h3>
        <h4>Using settings module <code>complete_lms.settings</code></h4>
        <table class="req">
          <thead>
            <tr>
              <th scope="col">Setting</th>
              <th scope="col">Value</th>
            </tr>
          </thead>
          <tbody>

            <tr>
              <td>ABSOLUTE_URL_OVERRIDES</td>
              <td class="code"><pre>{}</pre></td>
            </tr>

            <tr>
              <td>ADMINS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>ALLOWED_HOSTS</td>
              <td
                class="code"><pre>[&#x27;localhost&#x27;, &#x27;127.0.0.1&#x27;, &#x27;lms-app&#x27;, &#x27;0.0.0.0&#x27;, &#x27;*&#x27;]</pre></td>
            </tr>

            <tr>
              <td>APPEND_SLASH</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_CHANGE_DISPLAY_TRUNCATE_LENGTH</td>
              <td class="code"><pre>140</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_CID_GETTER</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_CID_HEADER</td>
              <td class="code"><pre>&#x27;x-correlation-id&#x27;</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_DISABLE_ON_RAW_SAVE</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_DISABLE_REMOTE_ADDR</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_EXCLUDE_TRACKING_FIELDS</td>
              <td class="code"><pre>()</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_EXCLUDE_TRACKING_MODELS</td>
              <td class="code"><pre>()</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_INCLUDE_ALL_MODELS</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_INCLUDE_TRACKING_MODELS</td>
              <td class="code"><pre>()</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_MASK_TRACKING_FIELDS</td>
              <td class="code"><pre>()</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_TWO_STEP_MIGRATION</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>AUDITLOG_USE_TEXT_CHANGES_IF_JSON_IS_NOT_PRESENT</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>AUTHENTICATION_BACKENDS</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>AUTH_PASSWORD_VALIDATORS</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>AUTH_SERVICE_URL</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>AUTH_USER_MODEL</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>BASE_DIR</td>
              <td class="code"><pre>PosixPath(&#x27;/app&#x27;)</pre></td>
            </tr>

            <tr>
              <td>CACHES</td>
              <td
                class="code"><pre>{&#x27;default&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.locmem.LocMemCache&#x27;}}</pre></td>
            </tr>

            <tr>
              <td>CACHE_MIDDLEWARE_ALIAS</td>
              <td class="code"><pre>&#x27;default&#x27;</pre></td>
            </tr>

            <tr>
              <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>CACHE_MIDDLEWARE_SECONDS</td>
              <td class="code"><pre>600</pre></td>
            </tr>

            <tr>
              <td>CORS_ALLOWED_ORIGINS</td>
              <td class="code"><pre>[&#x27;http://localhost:5173&#x27;,
 &#x27;https://crm-frontend-react.vercel.app&#x27;,
 &#x27;http://localhost:8000&#x27;]</pre></td>
            </tr>

            <tr>
              <td>CORS_ALLOW_CREDENTIALS</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>CORS_ALLOW_HEADERS</td>
              <td class="code"><pre>[&#x27;accept&#x27;,
 &#x27;authorization&#x27;,
 &#x27;content-type&#x27;,
 &#x27;origin&#x27;,
 &#x27;x-csrftoken&#x27;,
 &#x27;x-requested-with&#x27;,
 &#x27;x-tenant-id&#x27;]</pre></td>
            </tr>

            <tr>
              <td>CORS_ALLOW_METHODS</td>
              <td
                class="code"><pre>[&#x27;DELETE&#x27;, &#x27;GET&#x27;, &#x27;OPTIONS&#x27;, &#x27;PATCH&#x27;, &#x27;POST&#x27;, &#x27;PUT&#x27;]</pre></td>
            </tr>

            <tr>
              <td>CSRF_COOKIE_AGE</td>
              <td class="code"><pre>31449600</pre></td>
            </tr>

            <tr>
              <td>CSRF_COOKIE_DOMAIN</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>CSRF_COOKIE_HTTPONLY</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>CSRF_COOKIE_NAME</td>
              <td class="code"><pre>&#x27;csrftoken&#x27;</pre></td>
            </tr>

            <tr>
              <td>CSRF_COOKIE_PATH</td>
              <td class="code"><pre>&#x27;/&#x27;</pre></td>
            </tr>

            <tr>
              <td>CSRF_COOKIE_SAMESITE</td>
              <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
            </tr>

            <tr>
              <td>CSRF_COOKIE_SECURE</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>CSRF_FAILURE_VIEW</td>
              <td
                class="code"><pre>&#x27;django.views.csrf.csrf_failure&#x27;</pre></td>
            </tr>

            <tr>
              <td>CSRF_HEADER_NAME</td>
              <td class="code"><pre>&#x27;HTTP_X_CSRFTOKEN&#x27;</pre></td>
            </tr>

            <tr>
              <td>CSRF_TRUSTED_ORIGINS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>CSRF_USE_SESSIONS</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>DATABASES</td>
              <td
                class="code"><pre>{&#x27;default&#x27;: {&#x27;ATOMIC_REQUESTS&#x27;: False,
             &#x27;AUTOCOMMIT&#x27;: True,
             &#x27;CONN_HEALTH_CHECKS&#x27;: False,
             &#x27;CONN_MAX_AGE&#x27;: 60,
             &#x27;ENGINE&#x27;: &#x27;django_tenants.postgresql_backend&#x27;,
             &#x27;HOST&#x27;: &#x27;lms-db&#x27;,
             &#x27;NAME&#x27;: &#x27;multi_tenant_lms&#x27;,
             &#x27;OPTIONS&#x27;: {},
             &#x27;PASSWORD&#x27;: &#x27;********************&#x27;,
             &#x27;PORT&#x27;: &#x27;5432&#x27;,
             &#x27;SCHEMA&#x27;: &#x27;proliance&#x27;,
             &#x27;TEST&#x27;: {&#x27;CHARSET&#x27;: None,
                      &#x27;COLLATION&#x27;: None,
                      &#x27;MIGRATE&#x27;: True,
                      &#x27;MIRROR&#x27;: None,
                      &#x27;NAME&#x27;: None},
             &#x27;TIME_ZONE&#x27;: None,
             &#x27;USER&#x27;: &#x27;postgres&#x27;}}</pre></td>
            </tr>

            <tr>
              <td>DATABASE_ROUTERS</td>
              <td
                class="code"><pre>[&#x27;django_tenants.routers.TenantSyncRouter&#x27;]</pre></td>
            </tr>

            <tr>
              <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
              <td class="code"><pre>2621440</pre></td>
            </tr>

            <tr>
              <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
              <td class="code"><pre>1000</pre></td>
            </tr>

            <tr>
              <td>DATA_UPLOAD_MAX_NUMBER_FILES</td>
              <td class="code"><pre>100</pre></td>
            </tr>

            <tr>
              <td>DATETIME_FORMAT</td>
              <td class="code"><pre>&#x27;N j, Y, P&#x27;</pre></td>
            </tr>

            <tr>
              <td>DATETIME_INPUT_FORMATS</td>
              <td class="code"><pre>[&#x27;%Y-%m-%d %H:%M:%S&#x27;,
 &#x27;%Y-%m-%d %H:%M:%S.%f&#x27;,
 &#x27;%Y-%m-%d %H:%M&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%Y %H:%M&#x27;,
 &#x27;%m/%d/%y %H:%M:%S&#x27;,
 &#x27;%m/%d/%y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%y %H:%M&#x27;]</pre></td>
            </tr>

            <tr>
              <td>DATE_FORMAT</td>
              <td class="code"><pre>&#x27;N j, Y&#x27;</pre></td>
            </tr>

            <tr>
              <td>DATE_INPUT_FORMATS</td>
              <td class="code"><pre>[&#x27;%Y-%m-%d&#x27;,
 &#x27;%m/%d/%Y&#x27;,
 &#x27;%m/%d/%y&#x27;,
 &#x27;%b %d %Y&#x27;,
 &#x27;%b %d, %Y&#x27;,
 &#x27;%d %b %Y&#x27;,
 &#x27;%d %b, %Y&#x27;,
 &#x27;%B %d %Y&#x27;,
 &#x27;%B %d, %Y&#x27;,
 &#x27;%d %B %Y&#x27;,
 &#x27;%d %B, %Y&#x27;]</pre></td>
            </tr>

            <tr>
              <td>DEBUG</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>DECIMAL_SEPARATOR</td>
              <td class="code"><pre>&#x27;.&#x27;</pre></td>
            </tr>

            <tr>
              <td>DEFAULT_AUTO_FIELD</td>
              <td
                class="code"><pre>&#x27;django.db.models.BigAutoField&#x27;</pre></td>
            </tr>

            <tr>
              <td>DEFAULT_CHARSET</td>
              <td class="code"><pre>&#x27;utf-8&#x27;</pre></td>
            </tr>

            <tr>
              <td>DEFAULT_EXCEPTION_REPORTER</td>
              <td
                class="code"><pre>&#x27;django.views.debug.ExceptionReporter&#x27;</pre></td>
            </tr>

            <tr>
              <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
              <td
                class="code"><pre>&#x27;django.views.debug.SafeExceptionReporterFilter&#x27;</pre></td>
            </tr>

            <tr>
              <td>DEFAULT_FROM_EMAIL</td>
              <td class="code"><pre>&#x27;webmaster@localhost&#x27;</pre></td>
            </tr>

            <tr>
              <td>DEFAULT_INDEX_TABLESPACE</td>
              <td class="code"><pre>&#x27;&#x27;</pre></td>
            </tr>

            <tr>
              <td>DEFAULT_TABLESPACE</td>
              <td class="code"><pre>&#x27;&#x27;</pre></td>
            </tr>

            <tr>
              <td>DISALLOWED_USER_AGENTS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>EMAIL_BACKEND</td>
              <td
                class="code"><pre>&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</pre></td>
            </tr>

            <tr>
              <td>EMAIL_HOST</td>
              <td class="code"><pre>&#x27;localhost&#x27;</pre></td>
            </tr>

            <tr>
              <td>EMAIL_HOST_PASSWORD</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>EMAIL_HOST_USER</td>
              <td class="code"><pre>&#x27;&#x27;</pre></td>
            </tr>

            <tr>
              <td>EMAIL_PORT</td>
              <td class="code"><pre>25</pre></td>
            </tr>

            <tr>
              <td>EMAIL_SSL_CERTFILE</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>EMAIL_SSL_KEYFILE</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>EMAIL_SUBJECT_PREFIX</td>
              <td class="code"><pre>&#x27;[Django] &#x27;</pre></td>
            </tr>

            <tr>
              <td>EMAIL_TIMEOUT</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>EMAIL_USE_LOCALTIME</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>EMAIL_USE_SSL</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>EMAIL_USE_TLS</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>FILE_UPLOAD_HANDLERS</td>
              <td
                class="code"><pre>[&#x27;django.core.files.uploadhandler.MemoryFileUploadHandler&#x27;,
 &#x27;django.core.files.uploadhandler.TemporaryFileUploadHandler&#x27;]</pre></td>
            </tr>

            <tr>
              <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
              <td class="code"><pre>2621440</pre></td>
            </tr>

            <tr>
              <td>FILE_UPLOAD_PERMISSIONS</td>
              <td class="code"><pre>420</pre></td>
            </tr>

            <tr>
              <td>FILE_UPLOAD_TEMP_DIR</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>FIRST_DAY_OF_WEEK</td>
              <td class="code"><pre>0</pre></td>
            </tr>

            <tr>
              <td>FIXTURE_DIRS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>FORCE_SCRIPT_NAME</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>FORMAT_MODULE_PATH</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>FORMS_URLFIELD_ASSUME_HTTPS</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>FORM_RENDERER</td>
              <td
                class="code"><pre>&#x27;django.forms.renderers.DjangoTemplates&#x27;</pre></td>
            </tr>

            <tr>
              <td>IGNORABLE_404_URLS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>INSTALLED_APPS</td>
              <td class="code"><pre>[&#x27;django_tenants&#x27;,
 &#x27;shared&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;corsheaders&#x27;,
 &#x27;rest_framework&#x27;,
 &#x27;drf_spectacular&#x27;,
 &#x27;drf_yasg&#x27;,
 &#x27;django_filters&#x27;,
 &#x27;django_extensions&#x27;,
 &#x27;auditlog&#x27;,
 &#x27;courses&#x27;,
 &#x27;activitylog&#x27;,
 &#x27;schedule&#x27;,
 &#x27;payments&#x27;,
 &#x27;forum&#x27;,
 &#x27;groups&#x27;,
 &#x27;messaging&#x27;,
 &#x27;advert&#x27;,
 &#x27;ai_chat&#x27;,
 &#x27;carts&#x27;]</pre></td>
            </tr>

            <tr>
              <td>INTERNAL_IPS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>JOB_APPLICATIONS_URL</td>
              <td
                class="code"><pre>&#x27;http://job_applications:8003&#x27;</pre></td>
            </tr>

            <tr>
              <td>KAFKA_BOOTSTRAP_SERVERS</td>
              <td class="code"><pre>&#x27;kafka:9092&#x27;</pre></td>
            </tr>

            <tr>
              <td>KAFKA_TOPICS</td>
              <td
                class="code"><pre>{&#x27;branch&#x27;: &#x27;branch-events&#x27;,
 &#x27;participant&#x27;: &#x27;participant-events&#x27;,
 &#x27;request&#x27;: &#x27;request-events&#x27;,
 &#x27;requisition&#x27;: &#x27;requisition-events&#x27;,
 &#x27;tenant&#x27;: &#x27;tenant-events&#x27;,
 &#x27;video_session&#x27;: &#x27;video-session-events&#x27;}</pre></td>
            </tr>

            <tr>
              <td>LANGUAGES</td>
              <td class="code"><pre>[(&#x27;af&#x27;, &#x27;Afrikaans&#x27;),
 (&#x27;ar&#x27;, &#x27;Arabic&#x27;),
 (&#x27;ar-dz&#x27;, &#x27;Algerian Arabic&#x27;),
 (&#x27;ast&#x27;, &#x27;Asturian&#x27;),
 (&#x27;az&#x27;, &#x27;Azerbaijani&#x27;),
 (&#x27;bg&#x27;, &#x27;Bulgarian&#x27;),
 (&#x27;be&#x27;, &#x27;Belarusian&#x27;),
 (&#x27;bn&#x27;, &#x27;Bengali&#x27;),
 (&#x27;br&#x27;, &#x27;Breton&#x27;),
 (&#x27;bs&#x27;, &#x27;Bosnian&#x27;),
 (&#x27;ca&#x27;, &#x27;Catalan&#x27;),
 (&#x27;ckb&#x27;, &#x27;Central Kurdish (Sorani)&#x27;),
 (&#x27;cs&#x27;, &#x27;Czech&#x27;),
 (&#x27;cy&#x27;, &#x27;Welsh&#x27;),
 (&#x27;da&#x27;, &#x27;Danish&#x27;),
 (&#x27;de&#x27;, &#x27;German&#x27;),
 (&#x27;dsb&#x27;, &#x27;Lower Sorbian&#x27;),
 (&#x27;el&#x27;, &#x27;Greek&#x27;),
 (&#x27;en&#x27;, &#x27;English&#x27;),
 (&#x27;en-au&#x27;, &#x27;Australian English&#x27;),
 (&#x27;en-gb&#x27;, &#x27;British English&#x27;),
 (&#x27;eo&#x27;, &#x27;Esperanto&#x27;),
 (&#x27;es&#x27;, &#x27;Spanish&#x27;),
 (&#x27;es-ar&#x27;, &#x27;Argentinian Spanish&#x27;),
 (&#x27;es-co&#x27;, &#x27;Colombian Spanish&#x27;),
 (&#x27;es-mx&#x27;, &#x27;Mexican Spanish&#x27;),
 (&#x27;es-ni&#x27;, &#x27;Nicaraguan Spanish&#x27;),
 (&#x27;es-ve&#x27;, &#x27;Venezuelan Spanish&#x27;),
 (&#x27;et&#x27;, &#x27;Estonian&#x27;),
 (&#x27;eu&#x27;, &#x27;Basque&#x27;),
 (&#x27;fa&#x27;, &#x27;Persian&#x27;),
 (&#x27;fi&#x27;, &#x27;Finnish&#x27;),
 (&#x27;fr&#x27;, &#x27;French&#x27;),
 (&#x27;fy&#x27;, &#x27;Frisian&#x27;),
 (&#x27;ga&#x27;, &#x27;Irish&#x27;),
 (&#x27;gd&#x27;, &#x27;Scottish Gaelic&#x27;),
 (&#x27;gl&#x27;, &#x27;Galician&#x27;),
 (&#x27;he&#x27;, &#x27;Hebrew&#x27;),
 (&#x27;hi&#x27;, &#x27;Hindi&#x27;),
 (&#x27;hr&#x27;, &#x27;Croatian&#x27;),
 (&#x27;hsb&#x27;, &#x27;Upper Sorbian&#x27;),
 (&#x27;hu&#x27;, &#x27;Hungarian&#x27;),
 (&#x27;hy&#x27;, &#x27;Armenian&#x27;),
 (&#x27;ia&#x27;, &#x27;Interlingua&#x27;),
 (&#x27;id&#x27;, &#x27;Indonesian&#x27;),
 (&#x27;ig&#x27;, &#x27;Igbo&#x27;),
 (&#x27;io&#x27;, &#x27;Ido&#x27;),
 (&#x27;is&#x27;, &#x27;Icelandic&#x27;),
 (&#x27;it&#x27;, &#x27;Italian&#x27;),
 (&#x27;ja&#x27;, &#x27;Japanese&#x27;),
 (&#x27;ka&#x27;, &#x27;Georgian&#x27;),
 (&#x27;kab&#x27;, &#x27;Kabyle&#x27;),
 (&#x27;kk&#x27;, &#x27;Kazakh&#x27;),
 (&#x27;km&#x27;, &#x27;Khmer&#x27;),
 (&#x27;kn&#x27;, &#x27;Kannada&#x27;),
 (&#x27;ko&#x27;, &#x27;Korean&#x27;),
 (&#x27;ky&#x27;, &#x27;Kyrgyz&#x27;),
 (&#x27;lb&#x27;, &#x27;Luxembourgish&#x27;),
 (&#x27;lt&#x27;, &#x27;Lithuanian&#x27;),
 (&#x27;lv&#x27;, &#x27;Latvian&#x27;),
 (&#x27;mk&#x27;, &#x27;Macedonian&#x27;),
 (&#x27;ml&#x27;, &#x27;Malayalam&#x27;),
 (&#x27;mn&#x27;, &#x27;Mongolian&#x27;),
 (&#x27;mr&#x27;, &#x27;Marathi&#x27;),
 (&#x27;ms&#x27;, &#x27;Malay&#x27;),
 (&#x27;my&#x27;, &#x27;Burmese&#x27;),
 (&#x27;nb&#x27;, &#x27;Norwegian BokmÃ¥l&#x27;),
 (&#x27;ne&#x27;, &#x27;Nepali&#x27;),
 (&#x27;nl&#x27;, &#x27;Dutch&#x27;),
 (&#x27;nn&#x27;, &#x27;Norwegian Nynorsk&#x27;),
 (&#x27;os&#x27;, &#x27;Ossetic&#x27;),
 (&#x27;pa&#x27;, &#x27;Punjabi&#x27;),
 (&#x27;pl&#x27;, &#x27;Polish&#x27;),
 (&#x27;pt&#x27;, &#x27;Portuguese&#x27;),
 (&#x27;pt-br&#x27;, &#x27;Brazilian Portuguese&#x27;),
 (&#x27;ro&#x27;, &#x27;Romanian&#x27;),
 (&#x27;ru&#x27;, &#x27;Russian&#x27;),
 (&#x27;sk&#x27;, &#x27;Slovak&#x27;),
 (&#x27;sl&#x27;, &#x27;Slovenian&#x27;),
 (&#x27;sq&#x27;, &#x27;Albanian&#x27;),
 (&#x27;sr&#x27;, &#x27;Serbian&#x27;),
 (&#x27;sr-latn&#x27;, &#x27;Serbian Latin&#x27;),
 (&#x27;sv&#x27;, &#x27;Swedish&#x27;),
 (&#x27;sw&#x27;, &#x27;Swahili&#x27;),
 (&#x27;ta&#x27;, &#x27;Tamil&#x27;),
 (&#x27;te&#x27;, &#x27;Telugu&#x27;),
 (&#x27;tg&#x27;, &#x27;Tajik&#x27;),
 (&#x27;th&#x27;, &#x27;Thai&#x27;),
 (&#x27;tk&#x27;, &#x27;Turkmen&#x27;),
 (&#x27;tr&#x27;, &#x27;Turkish&#x27;),
 (&#x27;tt&#x27;, &#x27;Tatar&#x27;),
 (&#x27;udm&#x27;, &#x27;Udmurt&#x27;),
 (&#x27;ug&#x27;, &#x27;Uyghur&#x27;),
 (&#x27;uk&#x27;, &#x27;Ukrainian&#x27;),
 (&#x27;ur&#x27;, &#x27;Urdu&#x27;),
 (&#x27;uz&#x27;, &#x27;Uzbek&#x27;),
 (&#x27;vi&#x27;, &#x27;Vietnamese&#x27;),
 (&#x27;zh-hans&#x27;, &#x27;Simplified Chinese&#x27;),
 (&#x27;zh-hant&#x27;, &#x27;Traditional Chinese&#x27;)]</pre></td>
            </tr>

            <tr>
              <td>LANGUAGES_BIDI</td>
              <td
                class="code"><pre>[&#x27;he&#x27;, &#x27;ar&#x27;, &#x27;ar-dz&#x27;, &#x27;ckb&#x27;, &#x27;fa&#x27;, &#x27;ug&#x27;, &#x27;ur&#x27;]</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_CODE</td>
              <td class="code"><pre>&#x27;en-us&#x27;</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_COOKIE_AGE</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_COOKIE_DOMAIN</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_COOKIE_HTTPONLY</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_COOKIE_NAME</td>
              <td class="code"><pre>&#x27;django_language&#x27;</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_COOKIE_PATH</td>
              <td class="code"><pre>&#x27;/&#x27;</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_COOKIE_SAMESITE</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>LANGUAGE_COOKIE_SECURE</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>LOCALE_PATHS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>LOGGING</td>
              <td
                class="code"><pre>{&#x27;disable_existing_loggers&#x27;: False,
 &#x27;formatters&#x27;: {&#x27;simple&#x27;: {&#x27;format&#x27;: &#x27;[{levelname}] {message}&#x27;, &#x27;style&#x27;: &#x27;{&#x27;},
                &#x27;verbose&#x27;: {&#x27;datefmt&#x27;: &#x27;%Y-%m-%d %H:%M:%S&#x27;,
                            &#x27;format&#x27;: &#x27;{asctime} [{levelname}] {name} &#x27;
                                      &#x27;{message}&#x27;,
                            &#x27;style&#x27;: &#x27;{&#x27;}},
 &#x27;handlers&#x27;: {&#x27;console&#x27;: {&#x27;class&#x27;: &#x27;logging.StreamHandler&#x27;,
                          &#x27;formatter&#x27;: &#x27;simple&#x27;,
                          &#x27;level&#x27;: &#x27;INFO&#x27;},
              &#x27;file&#x27;: {&#x27;backupCount&#x27;: 5,
                       &#x27;class&#x27;: &#x27;logging.handlers.RotatingFileHandler&#x27;,
                       &#x27;filename&#x27;: &#x27;/app/logs/complete_lms.log&#x27;,
                       &#x27;formatter&#x27;: &#x27;verbose&#x27;,
                       &#x27;level&#x27;: &#x27;INFO&#x27;,
                       &#x27;maxBytes&#x27;: 5242880}},
 &#x27;loggers&#x27;: {&#x27;activitylog&#x27;: {&#x27;handlers&#x27;: [&#x27;file&#x27;, &#x27;console&#x27;],
                             &#x27;level&#x27;: &#x27;INFO&#x27;,
                             &#x27;propagate&#x27;: False},
             &#x27;complete_lms&#x27;: {&#x27;handlers&#x27;: [&#x27;file&#x27;, &#x27;console&#x27;],
                              &#x27;level&#x27;: &#x27;INFO&#x27;,
                              &#x27;propagate&#x27;: False},
             &#x27;courses&#x27;: {&#x27;handlers&#x27;: [&#x27;file&#x27;, &#x27;console&#x27;],
                         &#x27;level&#x27;: &#x27;INFO&#x27;,
                         &#x27;propagate&#x27;: False},
             &#x27;django&#x27;: {&#x27;handlers&#x27;: [&#x27;file&#x27;, &#x27;console&#x27;],
                        &#x27;level&#x27;: &#x27;INFO&#x27;,
                        &#x27;propagate&#x27;: True},
             &#x27;forum&#x27;: {&#x27;handlers&#x27;: [&#x27;file&#x27;, &#x27;console&#x27;],
                       &#x27;level&#x27;: &#x27;INFO&#x27;,
                       &#x27;propagate&#x27;: False},
             &#x27;lms_consumer&#x27;: {&#x27;handlers&#x27;: [&#x27;file&#x27;, &#x27;console&#x27;],
                              &#x27;level&#x27;: &#x27;INFO&#x27;,
                              &#x27;propagate&#x27;: False}},
 &#x27;version&#x27;: 1}</pre></td>
            </tr>

            <tr>
              <td>LOGGING_CONFIG</td>
              <td
                class="code"><pre>&#x27;logging.config.dictConfig&#x27;</pre></td>
            </tr>

            <tr>
              <td>LOGIN_REDIRECT_URL</td>
              <td class="code"><pre>&#x27;/accounts/profile/&#x27;</pre></td>
            </tr>

            <tr>
              <td>LOGIN_URL</td>
              <td class="code"><pre>&#x27;/accounts/login/&#x27;</pre></td>
            </tr>

            <tr>
              <td>LOGOUT_REDIRECT_URL</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>LOG_DIR</td>
              <td class="code"><pre>&#x27;/app/logs&#x27;</pre></td>
            </tr>

            <tr>
              <td>MANAGERS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>MEDIA_ROOT</td>
              <td class="code"><pre>&#x27;/app/media&#x27;</pre></td>
            </tr>

            <tr>
              <td>MEDIA_URL</td>
              <td class="code"><pre>&#x27;/media/&#x27;</pre></td>
            </tr>

            <tr>
              <td>MESSAGE_STORAGE</td>
              <td
                class="code"><pre>&#x27;django.contrib.messages.storage.fallback.FallbackStorage&#x27;</pre></td>
            </tr>

            <tr>
              <td>MIDDLEWARE</td>
              <td
                class="code"><pre>[&#x27;complete_lms.middleware.MicroserviceRS256JWTMiddleware&#x27;,
 &#x27;complete_lms.middleware.CustomTenantSchemaMiddleware&#x27;,
 &#x27;corsheaders.middleware.CorsMiddleware&#x27;,
 &#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;]</pre></td>
            </tr>

            <tr>
              <td>MIGRATION_MODULES</td>
              <td class="code"><pre>{}</pre></td>
            </tr>

            <tr>
              <td>MONTH_DAY_FORMAT</td>
              <td class="code"><pre>&#x27;F j&#x27;</pre></td>
            </tr>

            <tr>
              <td>NOTIFICATIONS_SERVICE_URL</td>
              <td class="code"><pre>&#x27;http://app:3001&#x27;</pre></td>
            </tr>

            <tr>
              <td>NUMBER_GROUPING</td>
              <td class="code"><pre>0</pre></td>
            </tr>

            <tr>
              <td>PASSWORD_HASHERS</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>PASSWORD_RESET_TIMEOUT</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>PREPEND_WWW</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>PUBLIC_SCHEMA_NAME</td>
              <td class="code"><pre>&#x27;public&#x27;</pre></td>
            </tr>

            <tr>
              <td>PUBLIC_SCHEMA_URLCONF</td>
              <td
                class="code"><pre>&#x27;complete_lms.urls_public&#x27;</pre></td>
            </tr>

            <tr>
              <td>REST_FRAMEWORK</td>
              <td
                class="code"><pre>{&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;: &#x27;********************&#x27;,
 &#x27;DEFAULT_PARSER_CLASSES&#x27;: [&#x27;rest_framework.parsers.JSONParser&#x27;,
                            &#x27;rest_framework.parsers.FormParser&#x27;,
                            &#x27;rest_framework.parsers.MultiPartParser&#x27;],
 &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: (&#x27;rest_framework.permissions.AllowAny&#x27;,),
 &#x27;DEFAULT_SCHEMA_CLASS&#x27;: &#x27;drf_spectacular.openapi.AutoSchema&#x27;}</pre></td>
            </tr>

            <tr>
              <td>ROOT_URLCONF</td>
              <td class="code"><pre>&#x27;complete_lms.urls&#x27;</pre></td>
            </tr>

            <tr>
              <td>SECRET_KEY</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>SECRET_KEY_FALLBACKS</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>SECURE_CROSS_ORIGIN_OPENER_POLICY</td>
              <td class="code"><pre>&#x27;same-origin&#x27;</pre></td>
            </tr>

            <tr>
              <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>SECURE_HSTS_PRELOAD</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>SECURE_HSTS_SECONDS</td>
              <td class="code"><pre>0</pre></td>
            </tr>

            <tr>
              <td>SECURE_PROXY_SSL_HEADER</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>SECURE_REDIRECT_EXEMPT</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>SECURE_REFERRER_POLICY</td>
              <td class="code"><pre>&#x27;same-origin&#x27;</pre></td>
            </tr>

            <tr>
              <td>SECURE_SSL_HOST</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>SECURE_SSL_REDIRECT</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>SERVER_EMAIL</td>
              <td class="code"><pre>&#x27;root@localhost&#x27;</pre></td>
            </tr>

            <tr>
              <td>SESSION_CACHE_ALIAS</td>
              <td class="code"><pre>&#x27;default&#x27;</pre></td>
            </tr>

            <tr>
              <td>SESSION_COOKIE_AGE</td>
              <td class="code"><pre>1209600</pre></td>
            </tr>

            <tr>
              <td>SESSION_COOKIE_DOMAIN</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>SESSION_COOKIE_HTTPONLY</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>SESSION_COOKIE_NAME</td>
              <td class="code"><pre>&#x27;sessionid&#x27;</pre></td>
            </tr>

            <tr>
              <td>SESSION_COOKIE_PATH</td>
              <td class="code"><pre>&#x27;/&#x27;</pre></td>
            </tr>

            <tr>
              <td>SESSION_COOKIE_SAMESITE</td>
              <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
            </tr>

            <tr>
              <td>SESSION_COOKIE_SECURE</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>SESSION_ENGINE</td>
              <td
                class="code"><pre>&#x27;django.contrib.sessions.backends.db&#x27;</pre></td>
            </tr>

            <tr>
              <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>SESSION_FILE_PATH</td>
              <td class="code"><pre>None</pre></td>
            </tr>

            <tr>
              <td>SESSION_SAVE_EVERY_REQUEST</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>SESSION_SERIALIZER</td>
              <td
                class="code"><pre>&#x27;django.contrib.sessions.serializers.JSONSerializer&#x27;</pre></td>
            </tr>

            <tr>
              <td>SETTINGS_MODULE</td>
              <td class="code"><pre>&#x27;complete_lms.settings&#x27;</pre></td>
            </tr>

            <tr>
              <td>SHARED_APPS</td>
              <td
                class="code"><pre>[&#x27;django_tenants&#x27;, &#x27;shared&#x27;, &#x27;django.contrib.contenttypes&#x27;]</pre></td>
            </tr>

            <tr>
              <td>SHORT_DATETIME_FORMAT</td>
              <td class="code"><pre>&#x27;m/d/Y P&#x27;</pre></td>
            </tr>

            <tr>
              <td>SHORT_DATE_FORMAT</td>
              <td class="code"><pre>&#x27;m/d/Y&#x27;</pre></td>
            </tr>

            <tr>
              <td>SIGNING_BACKEND</td>
              <td
                class="code"><pre>&#x27;django.core.signing.TimestampSigner&#x27;</pre></td>
            </tr>

            <tr>
              <td>SILENCED_SYSTEM_CHECKS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>SPECTACULAR_SETTINGS</td>
              <td class="code"><pre>{&#x27;COMPONENT_SPLIT_REQUEST&#x27;: True,
 &#x27;DESCRIPTION&#x27;: &#x27;API documentation for Talent Engine microservice&#x27;,
 &#x27;SECURITY&#x27;: [{&#x27;BearerAuth&#x27;: &#x27;********************&#x27;}],
 &#x27;SECURITY_SCHEMES&#x27;: {&#x27;BearerAuth&#x27;: &#x27;********************&#x27;},
 &#x27;SERVE_INCLUDE_SCHEMA&#x27;: False,
 &#x27;SWAGGER_UI_SETTINGS&#x27;: {&#x27;persistAuthorization&#x27;: &#x27;********************&#x27;},
 &#x27;TITLE&#x27;: &#x27;Talent Engine API&#x27;,
 &#x27;VERSION&#x27;: &#x27;1.0.0&#x27;}</pre></td>
            </tr>

            <tr>
              <td>STATICFILES_DIRS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>STATICFILES_FINDERS</td>
              <td
                class="code"><pre>[&#x27;django.contrib.staticfiles.finders.FileSystemFinder&#x27;,
 &#x27;django.contrib.staticfiles.finders.AppDirectoriesFinder&#x27;]</pre></td>
            </tr>

            <tr>
              <td>STATIC_ROOT</td>
              <td class="code"><pre>&#x27;/app/staticfiles&#x27;</pre></td>
            </tr>

            <tr>
              <td>STATIC_URL</td>
              <td class="code"><pre>&#x27;/static/&#x27;</pre></td>
            </tr>

            <tr>
              <td>STORAGES</td>
              <td
                class="code"><pre>{&#x27;default&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.core.files.storage.FileSystemStorage&#x27;},
 &#x27;staticfiles&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.contrib.staticfiles.storage.StaticFilesStorage&#x27;}}</pre></td>
            </tr>

            <tr>
              <td>STORAGE_TYPE</td>
              <td class="code"><pre>&#x27;supabase&#x27;</pre></td>
            </tr>

            <tr>
              <td>SUPABASE_BUCKET</td>
              <td class="code"><pre>&#x27;luminacaremedia&#x27;</pre></td>
            </tr>

            <tr>
              <td>SUPABASE_KEY</td>
              <td class="code"><pre>&#x27;********************&#x27;</pre></td>
            </tr>

            <tr>
              <td>SUPABASE_URL</td>
              <td
                class="code"><pre>&#x27;https://gkvgqvosnetifsonhxuo.supabase.co&#x27;</pre></td>
            </tr>

            <tr>
              <td>TEMPLATES</td>
              <td class="code"><pre>[{&#x27;APP_DIRS&#x27;: True,
  &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,
  &#x27;DIRS&#x27;: [PosixPath(&#x27;/app/templates&#x27;)],
  &#x27;OPTIONS&#x27;: {&#x27;context_processors&#x27;: [&#x27;django.template.context_processors.debug&#x27;,
                                     &#x27;django.template.context_processors.request&#x27;,
                                     &#x27;django.contrib.auth.context_processors.auth&#x27;,
                                     &#x27;django.contrib.messages.context_processors.messages&#x27;]}}]</pre></td>
            </tr>

            <tr>
              <td>TENANT_APPS</td>
              <td class="code"><pre>[&#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;corsheaders&#x27;,
 &#x27;rest_framework&#x27;,
 &#x27;drf_spectacular&#x27;,
 &#x27;drf_yasg&#x27;,
 &#x27;django_filters&#x27;,
 &#x27;django_extensions&#x27;,
 &#x27;auditlog&#x27;,
 &#x27;courses&#x27;,
 &#x27;activitylog&#x27;,
 &#x27;schedule&#x27;,
 &#x27;payments&#x27;,
 &#x27;forum&#x27;,
 &#x27;groups&#x27;,
 &#x27;messaging&#x27;,
 &#x27;advert&#x27;,
 &#x27;ai_chat&#x27;,
 &#x27;carts&#x27;]</pre></td>
            </tr>

            <tr>
              <td>TENANT_DOMAIN_MODEL</td>
              <td class="code"><pre>&#x27;shared.Domain&#x27;</pre></td>
            </tr>

            <tr>
              <td>TENANT_MODEL</td>
              <td class="code"><pre>&#x27;shared.Tenant&#x27;</pre></td>
            </tr>

            <tr>
              <td>TEST_NON_SERIALIZED_APPS</td>
              <td class="code"><pre>[]</pre></td>
            </tr>

            <tr>
              <td>TEST_RUNNER</td>
              <td
                class="code"><pre>&#x27;django.test.runner.DiscoverRunner&#x27;</pre></td>
            </tr>

            <tr>
              <td>THOUSAND_SEPARATOR</td>
              <td class="code"><pre>&#x27;,&#x27;</pre></td>
            </tr>

            <tr>
              <td>TIME_FORMAT</td>
              <td class="code"><pre>&#x27;P&#x27;</pre></td>
            </tr>

            <tr>
              <td>TIME_INPUT_FORMATS</td>
              <td
                class="code"><pre>[&#x27;%H:%M:%S&#x27;, &#x27;%H:%M:%S.%f&#x27;, &#x27;%H:%M&#x27;]</pre></td>
            </tr>

            <tr>
              <td>TIME_ZONE</td>
              <td class="code"><pre>&#x27;UTC&#x27;</pre></td>
            </tr>

            <tr>
              <td>USE_I18N</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>USE_THOUSAND_SEPARATOR</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>USE_TZ</td>
              <td class="code"><pre>True</pre></td>
            </tr>

            <tr>
              <td>USE_X_FORWARDED_HOST</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>USE_X_FORWARDED_PORT</td>
              <td class="code"><pre>False</pre></td>
            </tr>

            <tr>
              <td>WSGI_APPLICATION</td>
              <td
                class="code"><pre>&#x27;complete_lms.wsgi.application&#x27;</pre></td>
            </tr>

            <tr>
              <td>X_FRAME_OPTIONS</td>
              <td class="code"><pre>&#x27;DENY&#x27;</pre></td>
            </tr>

            <tr>
              <td>YEAR_MONTH_FORMAT</td>
              <td class="code"><pre>&#x27;F Y&#x27;</pre></td>
            </tr>

          </tbody>
        </table>

      </div>
    </main>

    <footer id="explanation">
      <p>
        Youâ€™re seeing this error because you have <code>DEBUG = True</code> in
        your
        Django settings file. Change that to <code>False</code>, and Django will
        display a standard page generated by the handler for this status code.
      </p>
    </footer>

  </body>
</html>