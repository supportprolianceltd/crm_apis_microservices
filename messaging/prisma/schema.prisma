// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        Int       @id @default(autoincrement())
  name      String
  schema    String    @unique
  users     User[]    @relation("TenantUsers")
  chats     Chat[]    @relation("TenantChats")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String?
  online        Boolean        @default(false)
  lastSeen      DateTime?
  firstName     String?
  lastName      String?
  role          String?
  tenantId      Int
  tenant        Tenant         @relation("TenantUsers", fields: [tenantId], references: [id])
  chats         UsersOnChats[] @relation("UserChats")
  messages      Message[]      @relation("UserMessages")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Chat {
  id          String         @id @default(cuid())
  name        String?
  type        ChatType      @default(DIRECT) 
  avatar      String?       
  users       UsersOnChats[] @relation("ChatUsers")
  messages    Message[]      @relation("ChatMessages")
  lastMessageId String?     // Simple foreign key reference (no relation needed)
  tenantId    Int?          
  tenant      Tenant?       @relation("TenantChats", fields: [tenantId], references: [id]) 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


model UsersOnChats {
  user        User     @relation("UserChats", fields: [userId], references: [id])
  userId      Int
  chat        Chat     @relation("ChatUsers", fields: [chatId], references: [id])
  chatId      String
  assignedAt  DateTime @default(now())
  leftAt      DateTime? 
  unreadCount Int       @default(0)  
  role        String    @default("MEMBER") 

  @@id([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chatId    String
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id])
  authorId  Int
  author    User     @relation("UserMessages", fields: [authorId], references: [id])
  status    MessageStatus @default(SENT)
  readAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatType {
  DIRECT
  GROUP
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}